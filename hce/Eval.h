#pragma once
#include "../Typedefs.h"
namespace hce {
    constexpr int PHASE_PIECE_VALUES[5] = {4,2,1,1,0};
    constexpr const static eval_t MATE_VALUE = 1048576;
    constexpr uint64_t bishop_pair = 158913790051ULL;
    constexpr uint64_t passed_pawn_on_ranks[] = {0ULL, 281432027103200ULL, 281401962332143ULL, 281410552201238ULL, 85899345980ULL, 51539607700ULL, 579820585213ULL, 0ULL};
    constexpr uint64_t passed_pawn_on_file[] = {81604378684ULL, 77309411384ULL, 281457796841505ULL, 12884901902ULL, 281419142135827ULL, 8589934621ULL, 12884901950ULL, 38654705724ULL};
    constexpr uint64_t doubled_pawn = 281457796906993ULL;
    constexpr uint64_t isolated_pawn = 281376192528369ULL;
    constexpr uint64_t king_zone_attacks[] = {107374182420ULL, 171798757365ULL, 133144051703ULL, 94489346037ULL, 94489346028ULL};
    constexpr uint64_t mobility[] = {281470681743378ULL, 25769803782ULL, 30064771082ULL, 3ULL, 281436322070514ULL};
    constexpr uint64_t king_psts[] = {223338364830ULL, 339302481877ULL, 281264523378668ULL, 280972465602556ULL, 281045479981065ULL, 280804961812510ULL, 281006825275398ULL, 373662220146ULL, 438086729663ULL, 128849084414ULL, 281453501874188ULL, 281135674294304ULL, 281165739065396ULL, 270582939699ULL, 51539607597ULL, 481036402617ULL, 249108168677ULL, 12884901906ULL, 281152854163498ULL, 280989645406271ULL, 281084134686798ULL, 281303178018895ULL, 281273113247806ULL, 536870977491ULL, 281105609588733ULL, 281268818280482ULL, 281084134686781ULL, 280783486976087ULL, 280792076910690ULL, 281217278672990ULL, 433791696935ULL, 281346127691794ULL, 4295032803ULL, 281264523313192ULL, 281135674294330ULL, 280813551747154ULL, 280865091354719ULL, 4294967392ULL, 171798691906ULL, 281363307560965ULL, 281277408280572ULL, 281389077364762ULL, 281144264228906ULL, 281062659850296ULL, 281066954817619ULL, 476741369936ULL, 111669149783ULL, 206158430212ULL, 274877972432ULL, 201863528446ULL, 281367602528270ULL, 280968170569770ULL, 281049774948420ULL, 158913790035ULL, 300647710790ULL, 416611893243ULL, 240518234012ULL, 201863528417ULL, 281135674294279ULL, 280573033578530ULL, 280676112793642ULL, 281303178018854ULL, 281328947822623ULL, 601295486829ULL};
    constexpr uint64_t piece_type_psts[][64] = {
            {},
            {},
            {},
            {1382979469821ULL, 1687922147848ULL, 1739461755402ULL, 1868310774307ULL, 1949915152934ULL, 1941325218323ULL, 1812476199427ULL, 949187772850ULL, 1782411428335ULL, 1756641624603ULL, 1889785610788ULL, 1971389989426ULL, 2048699400764ULL, 2207613190692ULL, 1945620185630ULL, 1142461301252ULL, 1735166788114ULL, 1881195676201ULL, 2014339662378ULL, 2113123910220ULL, 2203318223435ULL, 2332167242298ULL, 2138893713955ULL, 1563368096291ULL, 1846835937811ULL, 1992864825898ULL, 2078764171849ULL, 2121713844813ULL, 2375116915277ULL, 2327872275009ULL, 2233382994473ULL, 1743756722709ULL, 1851130905113ULL, 1992864825896ULL, 2147483648576ULL, 2207613190739ULL, 2143188681302ULL, 2525440770605ULL, 2074469204514ULL, 1979979923994ULL, 1928440316418ULL, 2018634629662ULL, 2052994368034ULL, 2121713844799ULL, 2345052144205ULL, 2589865280029ULL, 2478196130310ULL, 1589137900024ULL, 1808181232120ULL, 1881195676169ULL, 2010044695063ULL, 2095944041007ULL, 2010044695113ULL, 2276332667423ULL, 1932735283736ULL, 1335734829577ULL, 1571958030836ULL, 1864015806994ULL, 1859720839693ULL, 1932735283733ULL, 2138893713947ULL, 2083059139081ULL, 2052994367979ULL, 1245540516241ULL},
            {},
    };



    [[nodiscard]] inline packed_eval_t getPassedPawnOnSquareBonus(const int square) {
        return passed_pawn_on_ranks[square & 7] + passed_pawn_on_file[square >> 3];
    }


    [[nodiscard]] inline eval_t getEvalFromPacked (packed_eval_t packed, int phase) { // higher phase means closer to mg
        int mg = int(int16_t(packed >> 32 & 0xffff));
        int eg = int(int16_t(packed & 0xffff));
        return float(mg * phase + eg * (24 - phase)) / 24.0F;
    }
}

namespace pawn_eval {
    constexpr const static bitboard_t WHITE_PAWN_STOPPING_SQUARES[64] = {};
    constexpr const static bitboard_t BLACK_PAWN_STOPPING_SQUARES[64] = {};
    constexpr const static bitboard_t PAWN_NEIGHBOR_FILES[8] = {65280ULL,16711935ULL,4278255360ULL,1095233372160ULL,280379743272960ULL,71777214277877760ULL,18374966855136706560ULL,71776119061217280ULL};


    [[nodiscard]] inline bool isThisWhitePawnPassed (const int square, const bitboard_t blackPawns) {
        return (blackPawns & WHITE_PAWN_STOPPING_SQUARES[square]) == 0ULL;
    }
    [[nodiscard]] inline bool isThisBlackPawnPassed (const int square, const bitboard_t whitePawns) {
        return (whitePawns & BLACK_PAWN_STOPPING_SQUARES[square]) == 0ULL;
    }

    [[nodiscard]] inline bool isThisPawnIsolated (const int square, const bitboard_t friendlyPawns) {
        return (friendlyPawns & PAWN_NEIGHBOR_FILES[square >> 3]) == 0ULL;
    }

    [[nodiscard]] inline bool isThisPawnDoubled (const int square, const bitboard_t friendlyPawns) {
        return (~(1ULL << square) & friendlyPawns & 255ULL << (square & 56)) != 0ULL;
    }
}