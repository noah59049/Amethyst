#pragma once
#include "../Typedefs.h"
namespace hce {
    constexpr int PHASE_PIECE_VALUES[5] = {4,2,1,1,0};
    constexpr const static eval_t MATE_VALUE = 31000;
    constexpr uint64_t bishop_pair = 154618822755ULL;
    constexpr uint64_t passed_pawn_on_ranks[] = {0ULL, 281444912005091ULL, 281410552266740ULL, 281414847168538ULL, 81604378687ULL, 42949673112ULL, 566935683324ULL, 0ULL};
    constexpr uint64_t passed_pawn_on_file[] = {81604378686ULL, 77309411389ULL, 281462091808806ULL, 17179869200ULL, 281427732070421ULL, 12884901923ULL, 34359738435ULL, 47244640317ULL};
    constexpr uint64_t isolated_pawn = 281363307626476ULL;
    constexpr uint64_t king_shelter = 103079215105ULL;
    constexpr uint64_t king_zone_attacks[] = {90194313236ULL, 154618888181ULL, 120259149815ULL, 85899411445ULL, 77309476844ULL};
    constexpr uint64_t mobility[] = {18ULL, 21474836486ULL, 30064771082ULL, 4ULL, 281440617037809ULL};
    constexpr uint64_t king_psts[] = {};
    constexpr uint64_t piece_type_psts[][64] = {
            {},
            {},
            {1846835937778ULL, 1915555414539ULL, 1868310774279ULL, 1855425872394ULL, 1846835937808ULL, 1906965479957ULL, 1799591297533ULL, 1722281886222ULL, 1988569858570ULL, 1979979923961ULL, 1902670512653ULL, 1825361101330ULL, 1937030251024ULL, 2031519531526ULL, 1924145349121ULL, 1580547965467ULL, 1924145349116ULL, 2001454760437ULL, 1945620185613ULL, 1872605741588ULL, 1962800054794ULL, 1997159793159ULL, 1868310774280ULL, 1554778161683ULL, 1859720839687ULL, 1876900708877ULL, 1911260447248ULL, 2035814498828ULL, 2048699400724ULL, 2031519531515ULL, 1782411428363ULL, 1301375091237ULL, 1902670512645ULL, 1962800054793ULL, 1945620185620ULL, 2001454760454ULL, 2022929596933ULL, 1949915152898ULL, 1894080578046ULL, 1382979469855ULL, 1825361101330ULL, 1967095022080ULL, 1881195676172ULL, 1898375545352ULL, 1975684956684ULL, 2173253452295ULL, 1902670512642ULL, 1438814044689ULL, 1911260447219ULL, 2027224564225ULL, 1855425872385ULL, 1859720839690ULL, 1928440316424ULL, 2065879269895ULL, 1808181232138ULL, 1675037245968ULL, 1872605741530ULL, 1894080578031ULL, 1924145349114ULL, 1915555414520ULL, 1816771166737ULL, 1954210120216ULL, 1808181232122ULL, 1524713390596ULL},
            {},
            {},
    };



    [[nodiscard]] inline packed_eval_t getPassedPawnOnSquareBonus(const int square) {
        return passed_pawn_on_ranks[square & 7] + passed_pawn_on_file[square >> 3];
    }


    [[nodiscard]] inline eval_t getEvalFromPacked (packed_eval_t packed, int phase) { // higher phase means closer to mg
        int mg = int(int16_t(packed >> 32 & 0xffff));
        int eg = int(int16_t(packed & 0xffff));
        return eval_t((mg * phase + eg * (24 - phase)) / 24);
    }
}

namespace pawn_eval {
    constexpr const static bitboard_t WHITE_PAWN_STOPPING_SQUARES[64] = {};
    constexpr const static bitboard_t BLACK_PAWN_STOPPING_SQUARES[64] = {0ULL, 257ULL, 771ULL, 1799ULL, 3855ULL, 7967ULL, 16191ULL, 32639ULL, 0ULL, 65793ULL, 197379ULL, 460551ULL, 986895ULL, 2039583ULL, 4144959ULL, 8355711ULL, 0ULL, 16843008ULL, 50529024ULL, 117901056ULL, 252645120ULL, 522133248ULL, 1061109504ULL, 2139062016ULL, 0ULL, 4311810048ULL, 12935430144ULL, 30182670336ULL, 64677150720ULL, 133666111488ULL, 271644033024ULL, 547599876096ULL, 0ULL, 1103823372288ULL, 3311470116864ULL, 7726763606016ULL, 16557350584320ULL, 34218524540928ULL, 69540872454144ULL, 140185568280576ULL, 0ULL, 282578783305728ULL, 847736349917184ULL, 1978051483140096ULL, 4238681749585920ULL, 8759942282477568ULL, 17802463348260864ULL, 35887505479827456ULL, 0ULL, 72340168526266368ULL, 217020505578799104ULL, 506381179683864576ULL, 1085102527893995520ULL, 2242545224314257408ULL, 4557430617154781184ULL, 9187201402835828736ULL, 0ULL, 72339069014638592ULL, 217017207043915776ULL, 506373483102470144ULL, 1085086035219578880ULL, 2242511139453796352ULL, 4557361347922231296ULL, 9187061764859101184ULL};
    constexpr const static bitboard_t PAWN_NEIGHBOR_FILES[8] = {65280ULL,16711935ULL,4278255360ULL,1095233372160ULL,280379743272960ULL,71777214277877760ULL,18374966855136706560ULL,71776119061217280ULL};


    [[nodiscard]] inline bool isThisWhitePawnPassed (const int square, const bitboard_t blackPawns) {
        return (blackPawns & WHITE_PAWN_STOPPING_SQUARES[square]) == 0ULL;
    }
    [[nodiscard]] inline bool isThisBlackPawnPassed (const int square, const bitboard_t whitePawns) {
        return (whitePawns & BLACK_PAWN_STOPPING_SQUARES[square]) == 0ULL;
    }

    [[nodiscard]] inline bool isThisPawnIsolated (const int square, const bitboard_t friendlyPawns) {
        return (friendlyPawns & PAWN_NEIGHBOR_FILES[square >> 3]) == 0ULL;
    }

    [[nodiscard]] inline bool isThisPawnDoubled (const int square, const int friendlyPawns) {
        return (~(1ULL << square) & friendlyPawns & 255ULL << (square & 56)) != 0ULL;
    }
}

namespace kingsafety {
    // shield zones are the row with the king on them, plus the two rows in front.
    // And only on the king's file or neighboring files
    // the idea is that a pawn or piece in that zone counts as defending the king.
    constexpr const static bitboard_t WHITE_SHIELD_ZONES[64] = {1799ULL,3598ULL,7196ULL,14392ULL,28784ULL,57568ULL,49344ULL,32896ULL,460551ULL,921102ULL,1842204ULL,3684408ULL,7368816ULL,14737632ULL,12632256ULL,8421504ULL,117901056ULL,235802112ULL,471604224ULL,943208448ULL,1886416896ULL,3772833792ULL,3233857536ULL,2155905024ULL,30182670336ULL,60365340672ULL,120730681344ULL,241461362688ULL,482922725376ULL,965845450752ULL,827867529216ULL,551911686144ULL,7726763606016ULL,15453527212032ULL,30907054424064ULL,61814108848128ULL,123628217696256ULL,247256435392512ULL,211934087479296ULL,141289391652864ULL,1978051483140096ULL,3956102966280192ULL,7912205932560384ULL,15824411865120768ULL,31648823730241536ULL,63297647460483072ULL,54255126394699776ULL,36170084263133184ULL,506381179683864576ULL,1012762359367729152ULL,2025524718735458304ULL,4051049437470916608ULL,8102098874941833216ULL,16204197749883666432ULL,13889312357043142656ULL,9259541571362095104ULL,506373483102470144ULL,1012746966204940288ULL,2025493932409880576ULL,4050987864819761152ULL,8101975729639522304ULL,16203951459279044608ULL,13889101250810609664ULL,9259400833873739776ULL};
    constexpr const static bitboard_t BLACK_SHIELD_ZONES[64] = {257ULL, 771ULL, 1799ULL, 3598ULL, 7196ULL, 14392ULL, 28784ULL, 57568ULL, 65793ULL, 197379ULL, 460551ULL, 921102ULL, 1842204ULL, 3684408ULL, 7368816ULL, 14737632ULL, 16843008ULL, 50529024ULL, 117901056ULL, 235802112ULL, 471604224ULL, 943208448ULL, 1886416896ULL, 3772833792ULL, 4311810048ULL, 12935430144ULL, 30182670336ULL, 60365340672ULL, 120730681344ULL, 241461362688ULL, 482922725376ULL, 965845450752ULL, 1103823372288ULL, 3311470116864ULL, 7726763606016ULL, 15453527212032ULL, 30907054424064ULL, 61814108848128ULL, 123628217696256ULL, 247256435392512ULL, 282578783305728ULL, 847736349917184ULL, 1978051483140096ULL, 3956102966280192ULL, 7912205932560384ULL, 15824411865120768ULL, 31648823730241536ULL, 63297647460483072ULL, 72340168526266368ULL, 217020505578799104ULL, 506381179683864576ULL, 1012762359367729152ULL, 2025524718735458304ULL, 4051049437470916608ULL, 8102098874941833216ULL, 16204197749883666432ULL, 72339069014638592ULL, 217017207043915776ULL, 506373483102470144ULL, 1012746966204940288ULL, 2025493932409880576ULL, 4050987864819761152ULL, 8101975729639522304ULL, 16203951459279044608ULL};
}