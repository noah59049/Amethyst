#pragma once
#include "../Typedefs.h"
namespace hce {
    constexpr int PHASE_PIECE_VALUES[5] = {4,2,1,1,0};
    constexpr const static eval_t MATE_VALUE = 1048576;
    constexpr uint64_t bishop_pair = 154618822755ULL;
    constexpr uint64_t passed_pawn_on_ranks[] = {0ULL, 281436322070498ULL, 281406257299443ULL, 281410552201240ULL, 81604378687ULL, 38654705817ULL, 597000454403ULL, 0ULL};
    constexpr uint64_t passed_pawn_on_file[] = {81604378685ULL, 77309411387ULL, 281462091808805ULL, 21474836497ULL, 281419142135831ULL, 36ULL, 4294967361ULL, 34359738429ULL};
    constexpr uint64_t white_to_move = 137438953507ULL;
    constexpr uint64_t isolated_pawn = 281367602593771ULL;
    constexpr uint64_t king_zone_attacks[] = {107374182416ULL, 171798757362ULL, 128849084407ULL, 98784313331ULL, 94489346029ULL};
    constexpr uint64_t mobility[] = {281470681743379ULL, 25769803782ULL, 30064771082ULL, 281470681743363ULL, 281436322070514ULL};
    constexpr uint64_t king_psts[] = {244813201312ULL, 347892416470ULL, 281273113313264ULL, 280972465537024ULL, 281011120242703ULL, 280774897041447ULL, 281036890046477ULL, 373662220157ULL, 442381696959ULL, 128849084414ULL, 281462091808780ULL, 281144264228897ULL, 281152854163512ULL, 210453397563ULL, 34359738422ULL, 545460912064ULL, 231928299492ULL, 25769803793ULL, 281161444098088ULL, 280998235340864ULL, 281066954817617ULL, 281294588084308ULL, 281268818280515ULL, 592705552342ULL, 281109904556030ULL, 281273113247777ULL, 281101314555963ULL, 280817846714454ULL, 280804961812580ULL, 281208688738402ULL, 446676598825ULL, 281397667299347ULL, 281457796906978ULL, 281273113247782ULL, 281161444098104ULL, 280843616518226ULL, 280890861158498ULL, 8589934696ULL, 150323855431ULL, 281389077364743ULL, 281294588149754ULL, 281401962266647ULL, 281157149130792ULL, 281084134686776ULL, 281075544752215ULL, 493921239127ULL, 124554051677ULL, 193273528328ULL, 270583005134ULL, 210453463035ULL, 281384782397452ULL, 280972465537068ULL, 281049774948425ULL, 85899346014ULL, 223338299471ULL, 390842089469ULL, 257698103193ULL, 214748430301ULL, 281161444098052ULL, 280581623513123ULL, 280646048022577ULL, 281281703182381ULL, 281230163574823ULL, 584115617649ULL};
    constexpr uint64_t piece_type_psts[][64] = {
            {5733781341740ULL, 5759551145514ULL, 5712306505264ULL, 5738076309064ULL, 5695126636130ULL, 5806795785802ULL, 5763846112840ULL, 5566277617207ULL, 5746666243625ULL, 5802500818470ULL, 5755256178236ULL, 5699421603404ULL, 5755256178246ULL, 5806795785785ULL, 5643587028555ULL, 5523327944253ULL, 5828270622251ULL, 5849745458728ULL, 5781025982011ULL, 5716601472567ULL, 5746666243642ULL, 5815385720388ULL, 5656471930468ULL, 5656471930436ULL, 5849745458764ULL, 5875515262524ULL, 5755256178234ULL, 5785320949309ULL, 5729486374466ULL, 5802500818503ULL, 5600637355636ULL, 5832565589538ULL, 5845450491441ULL, 5858335393348ULL, 5793910883914ULL, 5811090753078ULL, 5776731014718ULL, 5815385720399ULL, 5540507813521ULL, 5798205851184ULL, 5738076309033ULL, 5944234739212ULL, 5776731014732ULL, 5746666243654ULL, 5772436047436ULL, 6012954215998ULL, 5789615916635ULL, 5811090753092ULL, 5896990098939ULL, 5961414608360ULL, 5823975654973ULL, 5789615916621ULL, 5798205851247ULL, 6043018987061ULL, 5750961210965ULL, 6085968659960ULL, 5854040425959ULL, 6043018986946ULL, 5789615916610ULL, 5798205851234ULL, 5781025982064ULL, 5952824673876ULL, 6043018987105ULL, 5703716570684ULL},
            {},
            {1885490643456ULL, 1945620185622ULL, 1906965479953ULL, 1898375545365ULL, 1906965479964ULL, 1962800054819ULL, 1898375545356ULL, 1760936591903ULL, 2031519531546ULL, 2014339662338ULL, 1937030251033ULL, 1876900708892ULL, 1971389989404ULL, 2083059139090ULL, 2035814498830ULL, 1627792605736ULL, 1941325218310ULL, 2044404433408ULL, 1988569858584ULL, 1894080578080ULL, 2018634629654ULL, 2057289335315ULL, 1954210120212ULL, 1602022801953ULL, 1915555414545ULL, 1924145349143ULL, 1949915152924ULL, 2083059139096ULL, 2087354106402ULL, 2087354106373ULL, 1838246003225ULL, 1344324764209ULL, 1945620185616ULL, 2001454760467ULL, 1979979923999ULL, 2052994368019ULL, 2078764171793ULL, 1979979923983ULL, 1971389989387ULL, 1404454306348ULL, 1906965479959ULL, 2078764171784ULL, 1997159793174ULL, 1924145349140ULL, 2027224564249ULL, 2224793059860ULL, 1906965479955ULL, 1447403979294ULL, 2022929596925ULL, 2126008812043ULL, 1967095022090ULL, 1915555414551ULL, 1962800054805ULL, 2095944040982ULL, 1868310774295ULL, 1666447311392ULL, 2001454760419ULL, 2010044695030ULL, 2040109466113ULL, 1958505087492ULL, 1864015807008ULL, 2005749727779ULL, 1812476199436ULL, 1567663063570ULL},
            {},
            {},
    };


    [[nodiscard]] inline packed_eval_t getPassedPawnOnSquareBonus(const int square) {
        return passed_pawn_on_ranks[square & 7] + passed_pawn_on_file[square >> 3];
    }


    [[nodiscard]] inline eval_t getEvalFromPacked (packed_eval_t packed, int phase) { // higher phase means closer to mg
        int mg = int(int16_t(packed >> 32 & 0xffff));
        int eg = int(int16_t(packed & 0xffff));
        return float(mg * phase + eg * (24 - phase)) / 24.0F;
    }
}

namespace pawn_eval {
    constexpr const static bitboard_t WHITE_PAWN_STOPPING_SQUARES[64] = {};
    constexpr const static bitboard_t BLACK_PAWN_STOPPING_SQUARES[64] = {};
    constexpr const static bitboard_t PAWN_NEIGHBOR_FILES[8] = {65280ULL,16711935ULL,4278255360ULL,1095233372160ULL,280379743272960ULL,71777214277877760ULL,18374966855136706560ULL,71776119061217280ULL};


    [[nodiscard]] inline bool isThisWhitePawnPassed (const int square, const bitboard_t blackPawns) {
        return (blackPawns & WHITE_PAWN_STOPPING_SQUARES[square]) == 0ULL;
    }
    [[nodiscard]] inline bool isThisBlackPawnPassed (const int square, const bitboard_t whitePawns) {
        return (whitePawns & BLACK_PAWN_STOPPING_SQUARES[square]) == 0ULL;
    }

    [[nodiscard]] inline bool isThisPawnIsolated (const int square, const bitboard_t friendlyPawns) {
        return (friendlyPawns & PAWN_NEIGHBOR_FILES[square >> 3]) == 0ULL;
    }

    [[nodiscard]] inline bool isThisPawnDoubled (const int square, const int friendlyPawns) {
        return (~(1ULL << square) & friendlyPawns & 255ULL << (square & 56)) != 0ULL;
    }
}