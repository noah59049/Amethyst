#pragma once
#include "../Typedefs.h"
namespace hce {
    constexpr int PHASE_PIECE_VALUES[5] = {4,2,1,1,0};
    constexpr const static eval_t MATE_VALUE = 1048576;
    constexpr packed_eval_t bishop_pair = 154618822753ULL;
    constexpr packed_eval_t passed_pawn_on_ranks[] = {0ULL, 281406257299419ULL, 281376192528365ULL, 281376192462865ULL, 51539607608ULL, 30064771216ULL, 592705487106ULL, 0ULL};
    constexpr packed_eval_t passed_pawn_on_file[] = {48ULL, 8589934638ULL, 281466386776099ULL, 17179869200ULL, 281432027037717ULL, 21474836512ULL, 281444911939637ULL, 281453501874227ULL};
    constexpr packed_eval_t king_zone_attacks[] = {103079215124ULL, 167503790069ULL, 133144051703ULL, 94489346037ULL, 90194378732ULL};
    constexpr packed_eval_t mobility[] = {281470681743378ULL, 25769803782ULL, 30064771082ULL, 281470681743362ULL, 281427732135912ULL};
    constexpr packed_eval_t king_psts[] = {219043397534ULL, 347892416471ULL, 281268818345965ULL, 280959580700669ULL, 281002530308106ULL, 280783486976029ULL, 280993940373508ULL, 360777318257ULL, 442381696961ULL, 128849084415ULL, 281427732070412ULL, 281114199457823ULL, 281152854163507ULL, 253403070514ULL, 42949673003ULL, 472446468024ULL, 253403135975ULL, 17179869203ULL, 281131379327018ULL, 280968170569792ULL, 281071249784909ULL, 281311767953486ULL, 281273113247805ULL, 536870977490ULL, 281105609588734ULL, 281268818280483ULL, 281071249784894ULL, 280762012139608ULL, 280774897041506ULL, 281195803836509ULL, 433791696932ULL, 281337537757201ULL, 8590000099ULL, 281268818280489ULL, 281135674294330ULL, 280800666845266ULL, 280847911485535ULL, 281462091808862ULL, 154618822720ULL, 281341832724483ULL, 281281703247869ULL, 281393372332059ULL, 281135674294313ULL, 281054069915702ULL, 281054069915729ULL, 446676598863ULL, 64424509526ULL, 180388626434ULL, 283467907026ULL, 219043397630ULL, 281367602528267ULL, 280972465537065ULL, 281036890046530ULL, 128849018962ULL, 274877907011ULL, 399432024056ULL, 244813201308ULL, 214748430305ULL, 281148559196166ULL, 280573033578529ULL, 280663227891754ULL, 281298883051557ULL, 281320357888028ULL, 579820650344ULL};
    constexpr packed_eval_t piece_type_psts[][64] = {
            {},
            {},
            {1821066133995ULL, 1881195676161ULL, 1842540970494ULL, 1821066134017ULL, 1825361101320ULL, 1881195676173ULL, 1769526526454ULL, 1713691951621ULL, 1954210120195ULL, 1962800054770ULL, 1859720839679ULL, 1799591297542ULL, 1898375545349ULL, 2010044695035ULL, 1924145349111ULL, 1554778161683ULL, 1902670512630ULL, 1975684956653ULL, 1924145349121ULL, 1833951035912ULL, 1932735283710ULL, 1971389989371ULL, 1855425872382ULL, 1541893259788ULL, 1838246003199ULL, 1872605741574ULL, 1894080578053ULL, 2001454760447ULL, 1997159793160ULL, 1997159793135ULL, 1748051689986ULL, 1279900254750ULL, 1872605741567ULL, 1949915152897ULL, 1924145349128ULL, 1962800054779ULL, 1988569858552ULL, 1906965479927ULL, 1851130905079ULL, 1348619731479ULL, 1855425872390ULL, 2018634629622ULL, 1924145349119ULL, 1872605741565ULL, 1954210120192ULL, 2138893713915ULL, 1846835937785ULL, 1430224110089ULL, 1958505087466ULL, 2083059139065ULL, 1881195676146ULL, 1838246003201ULL, 1902670512638ULL, 2027224564222ULL, 1791001362945ULL, 1636382540295ULL, 1915555414480ULL, 1941325218277ULL, 1967095022062ULL, 1885490643441ULL, 1782411428362ULL, 1919850381842ULL, 1769526526451ULL, 1494648619518ULL},
            {},
            {},
    };

    [[nodiscard]] inline packed_eval_t getPassedPawnOnSquareBonus(const int square) {
        return passed_pawn_on_ranks[square & 7] + passed_pawn_on_file[square >> 3];
    }


    [[nodiscard]] inline eval_t getEvalFromPacked (packed_eval_t packed, int phase) { // higher phase means closer to mg
        int mg = int(int16_t(packed >> 32 & 0xffff));
        int eg = int(int16_t(packed & 0xffff));
        return float(mg * phase + eg * (24 - phase)) / 24.0F;
    }
};

namespace pawn_eval {
    constexpr const static bitboard_t WHITE_PAWN_STOPPING_SQUARES[64] = {};
    constexpr const static bitboard_t BLACK_PAWN_STOPPING_SQUARES[64] = {};

    [[nodiscard]] inline bool isThisWhitePawnPassed (const int square, const bitboard_t blackPawns) {
        return (blackPawns & WHITE_PAWN_STOPPING_SQUARES[square]) == 0ULL;
    }
    [[nodiscard]] inline bool isThisBlackPawnPassed (const int square, const bitboard_t whitePawns) {
        return (whitePawns & BLACK_PAWN_STOPPING_SQUARES[square]) == 0ULL;
    }
}