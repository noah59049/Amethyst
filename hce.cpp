#include "hce.h"
#include "logarithm.h"
#include "attacks.h"

namespace hce {
    constexpr phase_t PHASE_PIECE_VALUES[6] = {0,1,1,2,4,0};
    constexpr phase_t MAX_PHASE = 24;

    constexpr packed_eval_t S(int16_t mg, int16_t eg) {
        return (uint32_t(uint16_t(mg)) << 16) + eg;
    }

    constexpr packed_eval_t mobility[6] = {S(-15, 49), S(21, 59), S(15, 40), S(7, 45), S(3, 93), S(-35, -13)};

    constexpr auto NUM_KING_BUCKETS = 2;

    inline auto getFriendlyKingBucket(square_t kingSquare, side_t side) {
        return kingSquare / 32;
    }

    // PSTs are bucketed by the friendly king
    // There are only two buckets:
    // queenside and kingside

    // Note that these PSTs are not the actual PSTs that we will use
    // They are the PSTs output from python-chess, which uses a1 = 0, h1 = 7, a8 = 56, h8 = 63
    // I use a1 = 0, a8 = 7, h1 = 56, h8 = 63
    // Which is reflected across the a1-h8 diagonal from how python-chess does it
    // Anyway, you can visualize these PSTs by pretending they are squares on a board
    // And each entry is S(mg, eg) for a black piece on that square
    constexpr std::array<std::array<std::array<packed_eval_t, 64>, 6>, 2> psts = {{
          {{
                   {
                           S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196),
                           S(175,356), S(186,312), S(159,269), S(171,322), S(162,323), S(138,313), S(131,330), S(152,372),
                           S(187,357), S(181,332), S(186,279), S(180,306), S(159,289), S(151,287), S(113,327), S(152,349),
                           S(145,364), S(152,330), S(176,266), S(211,300), S(203,279), S(158,292), S(145,307), S(131,348),
                           S(196,411), S(167,358), S(168,325), S(184,307), S(203,309), S(183,294), S(154,342), S(132,368),
                           S(320,454), S(314,441), S(286,417), S(228,393), S(239,387), S(257,371), S(236,401), S(141,433),
                           S(368,473), S(352,444), S(346,456), S(321,438), S(308,435), S(291,430), S(285,444), S(199,457),
                           S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196),
                   },
                   {
                           S(463,666), S(476,695), S(423,657), S(449,684), S(469,671), S(469,655), S(493,719), S(426,663),
                           S(456,698), S(399,698), S(383,592), S(444,611), S(466,597), S(474,601), S(489,675), S(457,688),
                           S(462,684), S(420,604), S(504,489), S(497,528), S(473,531), S(432,540), S(448,603), S(452,684),
                           S(456,710), S(421,621), S(422,528), S(451,535), S(476,560), S(401,550), S(479,641), S(460,685),
                           S(467,710), S(435,658), S(428,552), S(472,532), S(429,546), S(433,563), S(451,639), S(490,709),
                           S(486,710), S(456,609), S(423,508), S(433,523), S(483,535), S(429,520), S(503,626), S(481,709),
                           S(485,708), S(537,693), S(483,574), S(507,605), S(471,564), S(511,602), S(527,716), S(565,718),
                           S(625,735), S(539,710), S(567,701), S(575,683), S(577,714), S(564,683), S(552,718), S(611,721),
                   },
                   {
                           S(506,724), S(511,735), S(558,739), S(517,735), S(544,720), S(578,758), S(537,735), S(519,705),
                           S(497,762), S(527,676), S(529,668), S(547,682), S(543,665), S(526,674), S(512,683), S(521,725),
                           S(522,734), S(567,688), S(575,642), S(578,620), S(560,638), S(539,646), S(547,719), S(514,712),
                           S(532,731), S(503,703), S(498,608), S(576,586), S(554,592), S(491,663), S(517,663), S(542,730),
                           S(519,741), S(468,712), S(495,659), S(537,589), S(540,596), S(535,653), S(519,726), S(558,716),
                           S(486,757), S(548,716), S(520,630), S(528,646), S(508,635), S(594,661), S(557,714), S(580,740),
                           S(447,737), S(471,699), S(512,685), S(538,664), S(551,682), S(538,670), S(593,698), S(539,740),
                           S(654,744), S(588,741), S(600,736), S(609,736), S(607,732), S(597,712), S(582,724), S(656,764),
                   },
                   {
                           S( 620,1123), S( 593,1100), S( 594,1098), S( 662,1112), S( 669,1095), S( 646,1093), S( 660,1078), S( 638,1155),
                           S( 624,1103), S( 594,1124), S( 604,1124), S( 622,1144), S( 644,1124), S( 644,1125), S( 633,1111), S( 618,1118),
                           S( 648,1140), S( 628,1149), S( 624,1136), S( 621,1137), S( 605,1131), S( 609,1117), S( 628,1114), S( 627,1123),
                           S( 610,1140), S( 628,1133), S( 624,1123), S( 604,1140), S( 604,1120), S( 592,1135), S( 609,1132), S( 655,1141),
                           S( 666,1123), S( 646,1114), S( 652,1117), S( 610,1102), S( 586,1081), S( 650,1087), S( 641,1121), S( 670,1129),
                           S( 631,1093), S( 653,1104), S( 648,1093), S( 608,1073), S( 607,1063), S( 650,1081), S( 685,1096), S( 677,1096),
                           S( 654,1080), S( 660,1103), S( 687,1110), S( 661,1081), S( 657,1061), S( 673,1075), S( 666,1096), S( 685,1100),
                           S( 647,1088), S( 631,1074), S( 678,1076), S( 613,1031), S( 582,1027), S( 635,1063), S( 658,1062), S( 651,1081),
                   },
                   {
                           S(1132,1802), S(1159,1812), S(1205,1804), S(1219,1799), S(1235,1806), S(1226,1797), S(1180,1793), S(1137,1795),
                           S(1219,1834), S(1144,1794), S(1211,1805), S(1260,1812), S(1256,1810), S(1182,1779), S(1192,1772), S(1270,1799),
                           S(1239,1841), S(1206,1845), S(1208,1789), S(1216,1745), S(1187,1739), S(1206,1747), S(1211,1788), S(1222,1811),
                           S(1203,1846), S(1179,1804), S(1109,1727), S(1154,1676), S(1115,1637), S(1099,1690), S(1165,1748), S(1243,1824),
                           S(1220,1831), S(1090,1793), S(1086,1679), S(1076,1638), S(1086,1640), S(1118,1686), S(1157,1783), S(1253,1826),
                           S(1205,1828), S(1154,1747), S(1094,1693), S(1109,1688), S(1105,1670), S(1185,1716), S(1245,1772), S(1316,1846),
                           S(1254,1823), S(1131,1770), S(1151,1753), S(1182,1737), S(1179,1745), S(1181,1739), S(1250,1771), S(1326,1844),
                           S(1319,1799), S(1274,1780), S(1260,1767), S(1243,1766), S(1236,1753), S(1257,1772), S(1257,1770), S(1325,1813),
                   },
                   {
                           S( -70,-125), S(  55, -98), S(  32, -28), S( -44, -32), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
                           S(  -3, -71), S(  38,  -3), S(  22,   6), S(  27,  31), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
                           S( -54, -65), S(  22,  21), S(   0,  38), S( -16,  54), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
                           S( -56, -50), S(  20,  31), S(  -8,  60), S( -66, 104), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
                           S( -32, -25), S(  16,  54), S(  21,  87), S( -14, 101), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
                           S( -51,  -7), S( 106,  69), S(  73,  90), S(  81, 116), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
                           S( -19,  -2), S( 121,  95), S(  85, 102), S( 128,  93), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
                           S( -26, -95), S(  62,  19), S(  63,  36), S(  49,  48), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
                   },
           }},
          {{
                   {
                           S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196),
                           S(157,362), S(166,320), S(167,290), S(180,333), S(197,334), S(165,305), S(168,277), S(130,304),
                           S(137,364), S(138,341), S(163,320), S(179,322), S(188,309), S(168,265), S(154,311), S(162,329),
                           S(127,341), S(175,300), S(179,280), S(210,276), S(230,261), S(182,290), S(161,291), S(126,312),
                           S(134,394), S(186,328), S(183,329), S(209,270), S(224,261), S(199,289), S(163,331), S(142,347),
                           S(208,433), S(226,415), S(273,384), S(249,370), S(247,353), S(258,353), S(277,404), S(151,437),
                           S(336,455), S(316,430), S(317,426), S(299,402), S(303,407), S(291,416), S(257,433), S(247,455),
                           S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196),
                   },
                   {
                           S(384,655), S(480,730), S(446,681), S(489,688), S(487,680), S(439,646), S(503,712), S(401,699),
                           S(428,702), S(434,698), S(411,641), S(478,588), S(475,585), S(406,601), S(416,661), S(456,697),
                           S(410,684), S(405,588), S(434,515), S(468,561), S(462,556), S(469,491), S(448,610), S(480,677),
                           S(416,719), S(410,652), S(430,571), S(446,543), S(472,551), S(426,558), S(455,638), S(451,695),
                           S(439,718), S(433,648), S(399,553), S(447,545), S(425,544), S(465,552), S(448,671), S(482,685),
                           S(468,695), S(459,622), S(455,511), S(445,518), S(486,515), S(475,506), S(512,621), S(505,673),
                           S(460,711), S(528,683), S(470,591), S(520,595), S(453,559), S(543,592), S(535,684), S(535,693),
                           S(627,742), S(586,724), S(577,695), S(602,702), S(600,705), S(598,681), S(573,715), S(636,734),
                   },
                   {
                           S(541,718), S(553,705), S(576,770), S(539,705), S(558,720), S(519,727), S(523,684), S(500,676),
                           S(550,734), S(573,706), S(548,648), S(548,679), S(572,632), S(513,658), S(564,688), S(529,706),
                           S(534,712), S(511,672), S(556,661), S(537,608), S(537,632), S(561,628), S(536,681), S(550,691),
                           S(509,691), S(504,698), S(511,634), S(581,599), S(566,577), S(497,637), S(530,655), S(557,715),
                           S(525,720), S(520,694), S(531,660), S(552,605), S(554,590), S(529,635), S(495,693), S(537,708),
                           S(533,709), S(553,707), S(552,623), S(532,638), S(521,620), S(605,621), S(567,686), S(558,721),
                           S(520,717), S(545,669), S(534,679), S(583,672), S(571,648), S(541,654), S(581,666), S(544,697),
                           S(681,765), S(638,742), S(619,723), S(634,730), S(637,726), S(654,717), S(606,710), S(675,740),
                   },
                   {
                           S( 675,1181), S( 653,1119), S( 693,1098), S( 692,1103), S( 701,1085), S( 668,1172), S( 627,1092), S( 652,1169),
                           S( 624,1146), S( 616,1147), S( 652,1138), S( 664,1143), S( 670,1136), S( 629,1119), S( 653,1087), S( 619,1124),
                           S( 622,1151), S( 581,1145), S( 614,1134), S( 627,1122), S( 633,1140), S( 656,1119), S( 659,1105), S( 640,1125),
                           S( 641,1134), S( 612,1127), S( 629,1115), S( 624,1118), S( 631,1123), S( 614,1147), S( 626,1144), S( 622,1158),
                           S( 663,1116), S( 623,1112), S( 631,1101), S( 639,1074), S( 621,1087), S( 662,1112), S( 661,1130), S( 672,1133),
                           S( 641,1095), S( 650,1091), S( 648,1066), S( 631,1062), S( 668,1069), S( 686,1093), S( 720,1120), S( 690,1106),
                           S( 641,1087), S( 652,1088), S( 654,1083), S( 670,1059), S( 668,1078), S( 700,1106), S( 704,1120), S( 693,1102),
                           S( 665,1056), S( 638,1040), S( 633,1017), S( 600, 988), S( 632,1012), S( 672,1087), S( 671,1101), S( 685,1084),
                   },
                   {
                           S(1146,1888), S(1204,1834), S(1222,1822), S(1252,1850), S(1230,1815), S(1180,1808), S(1225,1829), S(1175,1853),
                           S(1200,1822), S(1200,1838), S(1221,1835), S(1220,1796), S(1227,1825), S(1179,1792), S(1201,1824), S(1253,1865),
                           S(1182,1815), S(1191,1851), S(1178,1749), S(1153,1775), S(1168,1793), S(1197,1818), S(1186,1833), S(1222,1855),
                           S(1165,1878), S(1128,1737), S(1078,1674), S(1107,1660), S(1105,1653), S(1113,1764), S(1179,1836), S(1214,1868),
                           S(1171,1794), S(1085,1722), S(1087,1640), S(1068,1612), S(1064,1618), S(1109,1708), S(1157,1831), S(1229,1873),
                           S(1192,1801), S(1138,1717), S(1097,1646), S(1090,1664), S(1098,1671), S(1201,1736), S(1239,1810), S(1276,1860),
                           S(1236,1816), S(1137,1755), S(1135,1714), S(1159,1702), S(1169,1728), S(1214,1768), S(1252,1795), S(1337,1863),
                           S(1329,1800), S(1221,1742), S(1192,1725), S(1181,1705), S(1219,1745), S(1279,1787), S(1312,1796), S(1336,1811),
                   },
                   {
                           S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(  10,  48), S( -74,   8), S(  24, -32), S( -64,-136),
                           S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S( -25,  70), S(   3,  81), S(  47,  17), S( -36, -51),
                           S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S( -38, 100), S( -54,  68), S(  -3,  40), S( -70, -21),
                           S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(-110, 132), S( -68, 120), S( -41,  71), S( -88,  15),
                           S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0, 144), S(  32, 126), S(  -2, 114), S(-125,  16),
                           S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S( 112, 139), S( 151, 137), S( 123, 130), S( -50,  30),
                           S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S( 124, 135), S( 106, 129), S( 130, 113), S( -16,  36),
                           S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(  43,  53), S(  63,  56), S(  41,  56), S( -22,-129),
                   },
           }},
        }};

    constexpr square_t flipSquare(square_t square) {
        return square >> 3 | (square & 7) << 3;
    }

    constexpr auto transformPSTs(const std::array<std::array<std::array<packed_eval_t, 64>, 6>, NUM_KING_BUCKETS>& psts_) {
        std::array<std::array<std::array<packed_eval_t, 64>, 6>, NUM_KING_BUCKETS> result = {};
        for (auto bucket = 0; bucket < NUM_KING_BUCKETS; bucket++) {
            for (piece_t piece = 0; piece <= pcs::KING; piece++) {
                for (square_t square = 0; square < 64; square++) {
                    result[bucket][piece][square] = psts_[bucket][piece][flipSquare(square)];
                }
            }
        }

        return result;
    }

    constexpr auto real_psts = transformPSTs(psts);

    inline eval_t evalFromPacked(packed_eval_t packed, phase_t phase) {
        int32_t mg = int32_t(int16_t(uint16_t((packed + (1U << 15)) >> 16)));
        int32_t eg = int32_t(int16_t(uint16_t(packed)));
        if (phase >= MAX_PHASE)
            return mg;
        else
            return (mg * phase + eg * (MAX_PHASE - phase)) / MAX_PHASE;
    }

    eval_t getStaticEval(const ChessBoard& board) {
        // Step 1: initialize eval and phase
        packed_eval_t packedEval = 0;
        phase_t phase = 0;
        const bitboard_t allPieces = board.getSideBB(sides::WHITE) | board.getSideBB(sides::BLACK);

        // Step 2: Loop through all the piece types, adding up their PSTs and mobility evals
        for (piece_t piece = pcs::PAWN; piece <= pcs::KING; piece++) {
            for (side_t side = 0; side < 2; side++) {
                const square_t kingSquare = log2ll(board.getPieceBB(pcs::KING) & board.getSideBB(side));
                const auto kingBucket = hce::getFriendlyKingBucket(kingSquare, side);
                const bitboard_t notFriendlyPieces = ~board.getSideBB(side);
                const eval_t multiplier = side == sides::WHITE ? 1 : -1;
                bitboard_t remainingPieces = board.getPieceBB(piece) & board.getSideBB(side);
                phase += hce::PHASE_PIECE_VALUES[piece] * std::popcount(remainingPieces);
                bitboard_t squareBB;
                square_t square;
                while (remainingPieces) {
                    squareBB = remainingPieces & -remainingPieces;
                    remainingPieces -= squareBB;
                    square = log2ll(squareBB);

                    // PSTs
                    packedEval += hce::real_psts[kingBucket][piece][square ^ (7 * side)] * multiplier;
                    // Mobility
                    const bitboard_t attacks = getAttackedSquares(square, piece, allPieces, side);
                    packedEval += hce::mobility[piece] * std::popcount(attacks & notFriendlyPieces) * multiplier;

                } // end while remainingPieces
            } // end for loop over side
        } // end for loop over piece type

        // Step 3: Unpack the eval
        eval_t whiteRelativeEval = hce::evalFromPacked(packedEval, phase);

        // Step 4: Return the eval from the perspective of stm
        return (board.getSTM() == sides::WHITE) ? whiteRelativeEval : -whiteRelativeEval;
    }
}

