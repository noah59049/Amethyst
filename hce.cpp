#include "hce.h"
#include "logarithm.h"
#include "attacks.h"

namespace hce {
    constexpr phase_t PHASE_PIECE_VALUES[6] = {0,1,1,2,4,0};
    constexpr phase_t MAX_PHASE = 24;

    constexpr packed_eval_t S(int16_t mg, int16_t eg) {
        return (uint32_t(uint16_t(mg)) << 16) + eg;
    }

    constexpr packed_eval_t mobility[6] = {S(-13, -26), S(0, 1), S(9, 12), S(8, 6), S(3, 9), S(-17, -3)};

    constexpr auto NUM_KING_BUCKETS = 2;

    inline auto getFriendlyKingBucket(square_t kingSquare, side_t side) {
        return kingSquare / 32;
    }

    // PSTs are bucketed by the friendly king
    // There are only two buckets:
    // queenside and kingside

    // Note that these PSTs are not the actual PSTs that we will use
    // They are the PSTs output from python-chess, which uses a1 = 0, h1 = 7, a8 = 56, h8 = 63
    // I use a1 = 0, a8 = 7, h1 = 56, h8 = 63
    // Which is reflected across the a1-h8 diagonal from how python-chess does it
    // Anyway, you can visualize these PSTs by pretending they are squares on a board
    // And each entry is S(mg, eg) for a black piece on that square
    constexpr std::array<std::array<std::array<packed_eval_t, 64>, 6>, 2> psts = {{
          {{
                   {
                           S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196),
                           S(156,249), S(240,262), S(195,246), S(130,270), S( 91,283), S( 98,279), S( 65,306), S(  0,289),
                           S(166,238), S(195,261), S(185,237), S(119,270), S(132,253), S( 97,257), S( 63,274), S( -2,262),
                           S(144,272), S(190,288), S(180,253), S(163,263), S(150,253), S(118,255), S(100,278), S( 13,260),
                           S(162,335), S(204,343), S(186,304), S(144,295), S(173,271), S(151,264), S(114,303), S( 34,295),
                           S(167,498), S(193,551), S(164,504), S(190,435), S(197,414), S(203,359), S(134,431), S( 34,410),
                           S(202,627), S(484,508), S(270,664), S(302,553), S(185,560), S(173,502), S( 88,585), S(-31,594),
                           S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196),
                   },
                   {
                           S(308,551), S(345,583), S(366,597), S(380,600), S(373,579), S(376,571), S(374,563), S(321,506),
                           S(375,572), S(337,624), S(412,617), S(437,623), S(428,612), S(428,616), S(406,580), S(370,566),
                           S(384,593), S(412,611), S(477,599), S(469,655), S(467,652), S(433,629), S(419,596), S(393,589),
                           S(428,593), S(422,629), S(481,652), S(481,658), S(514,673), S(468,658), S(494,634), S(423,583),
                           S(433,592), S(480,629), S(528,655), S(588,637), S(529,661), S(540,667), S(479,630), S(467,606),
                           S(375,605), S(501,602), S(534,625), S(567,634), S(604,630), S(542,625), S(551,593), S(411,601),
                           S(352,554), S(449,585), S(492,585), S(521,611), S(513,583), S(550,589), S(411,631), S(507,547),
                           S(203,437), S(251,526), S(350,594), S(390,555), S(384,617), S(296,579), S(323,589), S(197,476),
                   },
                   {
                           S(446,577), S(410,607), S(434,592), S(431,591), S(449,578), S(449,578), S(425,597), S(420,550),
                           S(433,612), S(519,556), S(507,556), S(468,574), S(451,582), S(465,567), S(439,581), S(430,553),
                           S(461,590), S(465,558), S(499,564), S(477,568), S(474,579), S(442,588), S(442,576), S(420,566),
                           S(435,582), S(472,579), S(467,574), S(517,564), S(484,566), S(444,592), S(442,571), S(440,593),
                           S(445,588), S(457,589), S(476,579), S(507,568), S(510,563), S(495,560), S(457,599), S(468,577),
                           S(398,631), S(486,579), S(455,587), S(525,560), S(470,554), S(529,571), S(510,568), S(484,589),
                           S(337,572), S(374,595), S(440,573), S(406,562), S(398,585), S(488,557), S(506,571), S(457,570),
                           S(327,576), S(327,596), S(345,596), S(259,628), S(295,617), S(190,615), S(394,582), S(308,618),
                   },
                   {
                           S( 431,1080), S( 471,1083), S( 497,1089), S( 524,1069), S( 531,1055), S( 518,1042), S( 527,1030), S( 493,1058),
                           S( 491,1036), S( 470,1058), S( 499,1069), S( 491,1082), S( 482,1069), S( 490,1058), S( 495,1049), S( 458,1046),
                           S( 491,1062), S( 461,1083), S( 498,1069), S( 486,1068), S( 455,1088), S( 466,1064), S( 483,1040), S( 451,1049),
                           S( 456,1073), S( 476,1084), S( 465,1093), S( 489,1088), S( 459,1096), S( 434,1089), S( 464,1074), S( 473,1071),
                           S( 503,1083), S( 485,1093), S( 492,1106), S( 504,1097), S( 497,1077), S( 526,1059), S( 518,1065), S( 515,1072),
                           S( 508,1078), S( 523,1095), S( 549,1087), S( 544,1070), S( 549,1069), S( 534,1081), S( 608,1056), S( 572,1064),
                           S( 574,1063), S( 562,1094), S( 593,1097), S( 617,1077), S( 605,1078), S( 602,1066), S( 574,1078), S( 620,1065),
                           S( 558,1073), S( 388,1135), S( 554,1115), S( 535,1100), S( 470,1123), S( 533,1087), S( 592,1072), S( 561,1098),
                   },
                   {
                           S( 831,1897), S( 794,1964), S( 863,1976), S( 875,1981), S( 894,1989), S( 901,1936), S( 854,2033), S( 884,1942),
                           S( 824,2006), S( 876,1942), S( 909,1977), S( 912,2040), S( 900,2024), S( 881,2040), S( 901,1970), S( 957,1916),
                           S( 838,2040), S( 861,2082), S( 880,2076), S( 878,2067), S( 894,2043), S( 866,2070), S( 887,2022), S( 877,2073),
                           S( 874,2020), S( 865,2078), S( 874,2069), S( 912,2102), S( 894,2060), S( 868,2077), S( 879,2050), S( 887,2098),
                           S( 854,2085), S( 837,2120), S( 856,2104), S( 876,2114), S( 896,2139), S( 905,2074), S( 895,2093), S( 938,2058),
                           S( 840,2083), S( 864,2075), S( 830,2163), S( 906,2114), S( 927,2110), S( 973,2077), S(1029,1972), S( 998,2047),
                           S( 862,2032), S( 822,2083), S( 819,2171), S( 795,2183), S( 801,2212), S( 927,2053), S( 950,2003), S( 965,2040),
                           S( 837,1921), S( 862,1975), S( 944,1994), S( 841,2092), S( 897,2047), S( 846,2041), S( 874,1987), S( 903,1992),
                   },
                   {
                           S( 324,-154), S( 382,-122), S( 333, -83), S( 253, -78), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
                           S( 354, -86), S( 356, -50), S( 321, -25), S( 296, -15), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
                           S( 242, -76), S( 286, -28), S( 215,   8), S( 191,  35), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
                           S( 183, -64), S( 223,  -6), S( 171,  40), S( 110,  74), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
                           S( 191, -45), S( 246,  19), S( 222,  59), S(  95,  93), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
                           S( 136, -21), S( 404,  18), S( 275,  56), S( 274,  74), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
                           S( 206, -54), S( 407,  -5), S( 306,  30), S( 475,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
                           S( 369,-212), S( 387,-125), S( 458, -98), S( 269, -27), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
                   },
           }},
          {{
                   {
                           S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196),
                           S( 72,268), S(118,289), S(106,267), S(101,276), S(136,294), S(169,263), S(227,249), S(126,206),
                           S( 63,252), S(106,267), S(114,248), S(130,265), S(153,253), S(146,247), S(194,241), S(148,204),
                           S( 66,265), S(126,277), S(127,250), S(159,241), S(168,239), S(161,240), S(175,260), S(127,223),
                           S( 85,310), S(141,306), S(144,276), S(158,263), S(197,248), S(179,263), S(194,290), S(150,268),
                           S(110,432), S(152,469), S(214,415), S(219,393), S(232,372), S(269,361), S(242,451), S(146,426),
                           S(251,531), S(293,535), S(289,539), S(320,479), S(309,476), S(271,514), S(130,582), S( 75,584),
                           S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196),
                   },
                   {
                           S(311,577), S(421,567), S(404,604), S(436,620), S(440,625), S(441,606), S(429,586), S(353,586),
                           S(392,597), S(413,624), S(444,646), S(471,647), S(476,644), S(473,632), S(441,613), S(433,619),
                           S(402,601), S(441,638), S(471,652), S(492,690), S(513,678), S(491,640), S(481,623), S(440,606),
                           S(433,637), S(465,660), S(499,698), S(506,693), S(527,703), S(511,674), S(506,655), S(461,622),
                           S(453,647), S(486,667), S(526,693), S(569,703), S(538,700), S(590,689), S(512,680), S(531,621),
                           S(458,625), S(520,650), S(572,677), S(579,676), S(644,647), S(663,640), S(578,631), S(534,597),
                           S(424,602), S(469,634), S(501,655), S(538,655), S(513,640), S(627,609), S(490,609), S(518,555),
                           S(203,515), S(252,627), S(347,636), S(388,632), S(447,632), S(354,592), S(341,590), S(323,437),
                   },
                   {
                           S(475,581), S(514,604), S(497,584), S(473,604), S(482,605), S(465,621), S(498,570), S(487,549),
                           S(498,598), S(507,588), S(512,580), S(478,611), S(501,606), S(511,593), S(536,596), S(494,573),
                           S(478,608), S(486,607), S(495,613), S(492,609), S(496,613), S(501,602), S(490,590), S(516,590),
                           S(469,602), S(468,614), S(481,619), S(524,603), S(521,594), S(485,601), S(477,606), S(493,582),
                           S(467,616), S(490,614), S(513,600), S(541,609), S(532,594), S(518,608), S(493,605), S(479,617),
                           S(485,620), S(515,602), S(514,596), S(542,579), S(519,599), S(574,594), S(549,604), S(530,622),
                           S(456,587), S(506,592), S(477,603), S(447,609), S(493,593), S(496,588), S(491,601), S(483,580),
                           S(435,610), S(389,627), S(370,616), S(267,654), S(342,628), S(382,614), S(419,598), S(403,580),
                   },
                   {
                           S( 574,1134), S( 572,1134), S( 597,1140), S( 611,1133), S( 619,1122), S( 594,1126), S( 602,1116), S( 590,1090),
                           S( 530,1139), S( 542,1143), S( 579,1137), S( 583,1138), S( 595,1120), S( 596,1109), S( 638,1080), S( 580,1104),
                           S( 523,1147), S( 523,1140), S( 542,1143), S( 557,1147), S( 572,1126), S( 575,1111), S( 623,1073), S( 600,1083),
                           S( 522,1155), S( 514,1161), S( 536,1161), S( 552,1150), S( 569,1140), S( 557,1136), S( 590,1124), S( 573,1115),
                           S( 539,1169), S( 551,1162), S( 556,1173), S( 577,1156), S( 589,1129), S( 607,1128), S( 609,1129), S( 629,1119),
                           S( 557,1166), S( 595,1163), S( 595,1165), S( 604,1155), S( 658,1135), S( 675,1117), S( 746,1115), S( 696,1105),
                           S( 588,1164), S( 589,1180), S( 623,1188), S( 656,1170), S( 637,1168), S( 722,1134), S( 702,1136), S( 753,1100),
                           S( 604,1161), S( 602,1164), S( 584,1188), S( 583,1182), S( 647,1152), S( 651,1164), S( 603,1177), S( 693,1134),
                   },
                   {
                           S( 973,2182), S( 979,2184), S(1001,2180), S(1015,2206), S(1009,2172), S( 960,2190), S( 997,2121), S( 985,2144),
                           S( 988,2180), S( 988,2200), S(1006,2193), S(1006,2201), S(1006,2211), S(1022,2156), S(1028,2116), S(1022,2086),
                           S( 974,2181), S( 977,2221), S( 977,2237), S( 977,2240), S( 975,2250), S( 991,2245), S(1003,2224), S(1001,2212),
                           S( 972,2212), S( 961,2241), S( 961,2258), S( 975,2274), S( 984,2276), S( 976,2287), S( 989,2281), S(1009,2264),
                           S( 958,2223), S( 970,2233), S( 982,2237), S( 974,2287), S( 976,2308), S( 999,2317), S( 999,2329), S(1016,2307),
                           S(1000,2198), S( 984,2218), S( 996,2256), S(1001,2284), S(1018,2320), S(1113,2278), S(1106,2257), S(1080,2289),
                           S( 985,2205), S( 959,2243), S( 966,2289), S( 957,2310), S( 965,2359), S(1051,2307), S(1023,2285), S(1100,2252),
                           S( 909,2238), S( 890,2275), S( 951,2285), S( 989,2271), S(1041,2261), S(1085,2229), S(1167,2126), S(1033,2177),
                   },
                   {
                           S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(-158, -32), S(-221,  -2), S( -89, -51), S(-104,-116),
                           S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(-218,  68), S(-186,  50), S(-102,  14), S(-121, -29),
                           S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(-295, 105), S(-291,  84), S(-216,  41), S(-270,  13),
                           S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(-412, 144), S(-333, 112), S(-324,  84), S(-406,  46),
                           S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(-384, 151), S(-321, 139), S(-292, 113), S(-413,  65),
                           S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(-219, 133), S( -71, 116), S(-119, 115), S(-253,  57),
                           S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(-149,  94), S(-184, 114), S( -93,  96), S(-257,  43),
                           S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(-229,   1), S(-171,   5), S(-103,  -5), S( 215,-237),
                   },
           }},
        }};

    constexpr square_t flipSquare(square_t square) {
        return square >> 3 | (square & 7) << 3;
    }

    constexpr auto transformPSTs(const std::array<std::array<std::array<packed_eval_t, 64>, 6>, NUM_KING_BUCKETS>& psts_) {
        std::array<std::array<std::array<packed_eval_t, 64>, 6>, NUM_KING_BUCKETS> result = {};
        for (auto bucket = 0; bucket < NUM_KING_BUCKETS; bucket++) {
            for (piece_t piece = 0; piece <= pcs::KING; piece++) {
                for (square_t square = 0; square < 64; square++) {
                    result[bucket][piece][square] = psts_[bucket][piece][flipSquare(square)];
                }
            }
        }

        return result;
    }

    constexpr auto real_psts = transformPSTs(psts);

    inline eval_t evalFromPacked(packed_eval_t packed, phase_t phase) {
        int32_t mg = int32_t(int16_t(uint16_t((packed + (1U << 15)) >> 16)));
        int32_t eg = int32_t(int16_t(uint16_t(packed)));
        if (phase >= MAX_PHASE)
            return mg;
        else
            return (mg * phase + eg * (MAX_PHASE - phase)) / MAX_PHASE;
    }

    eval_t getStaticEval(const ChessBoard& board) {
        // Step 1: initialize eval and phase
        packed_eval_t packedEval = 0;
        phase_t phase = 0;
        const bitboard_t allPieces = board.getSideBB(sides::WHITE) | board.getSideBB(sides::BLACK);

        // Step 2: Loop through all the piece types, adding up their PSTs and mobility evals
        for (piece_t piece = pcs::PAWN; piece <= pcs::KING; piece++) {
            for (side_t side = 0; side < 2; side++) {
                const square_t kingSquare = log2ll(board.getPieceBB(pcs::KING) & board.getSideBB(side));
                const auto kingBucket = hce::getFriendlyKingBucket(kingSquare, side);
                const bitboard_t notFriendlyPieces = ~board.getSideBB(side);
                const eval_t multiplier = side == sides::WHITE ? 1 : -1;
                bitboard_t remainingPieces = board.getPieceBB(piece) & board.getSideBB(side);
                phase += hce::PHASE_PIECE_VALUES[piece] * std::popcount(remainingPieces);
                bitboard_t squareBB;
                square_t square;
                while (remainingPieces) {
                    squareBB = remainingPieces & -remainingPieces;
                    remainingPieces -= squareBB;
                    square = log2ll(squareBB);

                    // PSTs
                    packedEval += hce::real_psts[kingBucket][piece][square ^ (7 * side)] * multiplier;
                    // Mobility
                    const bitboard_t attacks = getAttackedSquares(square, piece, allPieces, side);
                    packedEval += hce::mobility[piece] * std::popcount(attacks & notFriendlyPieces) * multiplier;

                } // end while remainingPieces
            } // end for loop over side
        } // end for loop over piece type

        // Step 3: Unpack the eval
        eval_t whiteRelativeEval = hce::evalFromPacked(packedEval, phase);

        // Step 4: Return the eval from the perspective of stm
        return (board.getSTM() == sides::WHITE) ? whiteRelativeEval : -whiteRelativeEval;
    }
}

