#include "hce.h"
#include "logarithm.h"
#include "attacks.h"

namespace hce {
    constexpr phase_t PHASE_PIECE_VALUES[6] = {0,1,1,2,4,0};
    constexpr phase_t MAX_PHASE = 24;

    constexpr packed_eval_t S(int16_t mg, int16_t eg) {
        return (uint32_t(uint16_t(mg)) << 16) + eg;
    }

    constexpr packed_eval_t mobility[6] = {S(-13, -25), S(0, 2), S(9, 12), S(8, 6), S(2, 12), S(-17, -3)};

    constexpr auto NUM_KING_BUCKETS = 2;

    inline auto getFriendlyKingBucket(square_t kingSquare, side_t side) {
        return kingSquare / 32;
    }

    // PSTs are bucketed by the friendly king
    // There are only two buckets:
    // queenside and kingside

    // Note that these PSTs are not the actual PSTs that we will use
    // They are the PSTs output from python-chess, which uses a1 = 0, h1 = 7, a8 = 56, h8 = 63
    // I use a1 = 0, a8 = 7, h1 = 56, h8 = 63
    // It would have been better if I used the square numbering system that python-chess uses instead of mine, but oh well
    // Which is reflected across the a1-h8 diagonal from how python-chess does it
    // Anyway, you can visualize these PSTs by pretending they are squares on a board
    // And each entry is S(mg, eg) for a black piece on that square
    constexpr std::array<std::array<std::array<packed_eval_t, 64>, 6>, 2> psts = {{
          {{
                   {
                           S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0),
                           S(161,248), S(246,261), S(199,244), S(133,270), S( 94,281), S(101,278), S( 68,304), S(  2,289),
                           S(171,236), S(200,260), S(189,236), S(121,270), S(136,251), S( 99,255), S( 66,273), S(  1,261),
                           S(150,270), S(196,286), S(184,252), S(165,262), S(153,252), S(120,254), S(103,277), S( 14,259),
                           S(167,333), S(209,342), S(188,303), S(147,295), S(175,270), S(154,263), S(119,301), S( 35,295),
                           S(185,495), S(207,550), S(176,500), S(200,434), S(209,412), S(206,360), S(139,432), S( 38,410),
                           S(230,622), S(500,505), S(274,666), S(305,546), S(195,567), S(176,499), S( 99,588), S(-20,594),
                           S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0),
                   },
                   {
                           S(325,552), S(366,579), S(386,597), S(397,602), S(389,582), S(396,571), S(391,565), S(319,499),
                           S(398,569), S(360,620), S(440,611), S(458,620), S(449,609), S(451,611), S(431,573), S(394,560),
                           S(408,591), S(432,611), S(499,595), S(490,652), S(491,648), S(453,624), S(440,591), S(411,589),
                           S(449,593), S(455,618), S(504,646), S(504,654), S(538,668), S(492,653), S(509,635), S(445,582),
                           S(451,591), S(505,623), S(551,648), S(615,630), S(553,656), S(562,662), S(505,624), S(489,605),
                           S(408,600), S(533,596), S(544,627), S(602,621), S(621,630), S(596,606), S(600,576), S(411,608),
                           S(380,554), S(446,595), S(524,576), S(567,599), S(505,599), S(545,598), S(440,628), S(541,547),
                           S(213,427), S(254,533), S(347,602), S(382,560), S(394,620), S(299,598), S(353,570), S(182,490),
                   },
                   {
                           S(479,576), S(432,610), S(454,595), S(449,594), S(471,580), S(468,580), S(453,598), S(451,547),
                           S(454,618), S(539,560), S(530,559), S(489,577), S(471,586), S(488,566), S(458,584), S(452,558),
                           S(481,594), S(485,561), S(520,569), S(497,573), S(494,583), S(465,589), S(465,576), S(440,570),
                           S(458,584), S(498,581), S(487,578), S(537,568), S(510,566), S(464,594), S(461,574), S(462,597),
                           S(462,592), S(477,593), S(498,581), S(521,575), S(526,569), S(516,563), S(477,606), S(490,581),
                           S(422,632), S(518,578), S(478,588), S(549,561), S(497,553), S(547,575), S(533,573), S(505,591),
                           S(368,571), S(407,595), S(475,569), S(413,567), S(395,592), S(526,550), S(539,571), S(485,570),
                           S(345,581), S(342,602), S(364,604), S(276,633), S(301,626), S(198,621), S(418,581), S(315,621),
                   },
                   {
                           S( 461,1092), S( 506,1093), S( 532,1099), S( 556,1081), S( 565,1067), S( 551,1053), S( 559,1042), S( 525,1070),
                           S( 518,1053), S( 495,1073), S( 530,1083), S( 522,1095), S( 515,1080), S( 523,1072), S( 531,1057), S( 492,1059),
                           S( 532,1070), S( 486,1098), S( 530,1082), S( 520,1080), S( 489,1099), S( 506,1072), S( 521,1047), S( 484,1061),
                           S( 486,1089), S( 507,1097), S( 511,1103), S( 526,1098), S( 492,1109), S( 460,1103), S( 506,1080), S( 499,1089),
                           S( 514,1104), S( 493,1115), S( 534,1115), S( 532,1111), S( 527,1091), S( 571,1068), S( 563,1072), S( 541,1089),
                           S( 515,1099), S( 533,1116), S( 566,1106), S( 578,1084), S( 598,1075), S( 575,1091), S( 641,1069), S( 616,1073),
                           S( 609,1074), S( 610,1101), S( 635,1108), S( 652,1087), S( 649,1086), S( 648,1073), S( 606,1091), S( 668,1071),
                           S( 596,1082), S( 415,1142), S( 592,1123), S( 567,1115), S( 502,1134), S( 556,1106), S( 634,1085), S( 578,1116),
                   },
                   {
                           S(1012,1747), S( 929,1925), S( 984,1949), S(1008,1929), S(1030,1928), S(1029,1899), S( 989,1986), S(1030,1877),
                           S( 956,1939), S(1006,1902), S(1042,1927), S(1045,1991), S(1034,1970), S(1018,1977), S(1033,1926), S(1083,1888),
                           S( 961,2015), S( 994,2036), S(1016,2023), S(1012,2011), S(1028,1988), S(1001,2017), S(1024,1959), S(1006,2037),
                           S(1010,1964), S(1000,2026), S(1014,2005), S(1054,2034), S(1037,1987), S(1009,2010), S(1015,1994), S(1024,2039),
                           S( 996,2023), S( 974,2066), S( 988,2054), S(1015,2051), S(1037,2079), S(1039,2025), S(1033,2037), S(1073,2009),
                           S( 975,2029), S( 987,2038), S( 966,2116), S(1043,2067), S(1057,2070), S(1101,2033), S(1161,1926), S(1141,1992),
                           S(1006,1972), S( 959,2030), S( 961,2113), S( 914,2148), S( 919,2172), S(1055,2006), S(1080,1969), S(1100,1993),
                           S( 951,1893), S(1050,1884), S(1141,1897), S(1079,1964), S(1138,1917), S(1200,1842), S(1142,1837), S(1020,1963),
                   },
                   {
                           S( 193,-166), S( 248,-132), S( 200, -94), S( 119, -89), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
                           S( 217, -96), S( 223, -61), S( 188, -37), S( 163, -26), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
                           S( 113, -87), S( 147, -37), S(  82,  -4), S(  62,  22), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
                           S(  54, -75), S( 111, -21), S(  49,  27), S(   3,  59), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
                           S(  58, -57), S(  94,  13), S(  83,  49), S( -39,  81), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
                           S( -96, -17), S( 265,   5), S( 142,  44), S( 139,  63), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
                           S(  16, -53), S( 175,   7), S(  73,  39), S( 246,   6), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
                           S( 536,-293), S( 426,-175), S( 497,-146), S( 319, -77), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
                   },
           }},
          {{
                   {
                           S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0),
                           S( 72,267), S(118,287), S(106,266), S(101,277), S(136,292), S(171,261), S(228,247), S(127,205),
                           S( 64,250), S(107,265), S(114,246), S(131,264), S(154,251), S(147,245), S(195,240), S(149,203),
                           S( 67,263), S(127,276), S(128,248), S(160,239), S(169,238), S(161,238), S(176,258), S(128,222),
                           S( 86,308), S(142,305), S(145,274), S(159,261), S(198,246), S(180,261), S(195,289), S(151,267),
                           S(112,430), S(154,463), S(214,413), S(221,390), S(233,370), S(272,358), S(238,450), S(149,422),
                           S(259,522), S(290,535), S(296,539), S(323,476), S(310,475), S(272,510), S(137,577), S( 79,579),
                           S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0),
                   },
                   {
                           S(326,555), S(425,553), S(407,591), S(441,604), S(443,610), S(447,591), S(433,573), S(358,574),
                           S(397,582), S(417,609), S(448,630), S(475,630), S(479,628), S(479,614), S(446,597), S(437,605),
                           S(406,586), S(445,620), S(476,633), S(497,671), S(519,658), S(496,621), S(486,605), S(445,591),
                           S(437,622), S(471,641), S(505,678), S(512,672), S(532,682), S(517,653), S(511,638), S(465,606),
                           S(457,631), S(492,647), S(532,671), S(574,682), S(545,679), S(596,666), S(518,662), S(535,605),
                           S(458,612), S(526,632), S(578,657), S(585,656), S(648,627), S(668,619), S(584,612), S(541,579),
                           S(424,590), S(473,618), S(506,638), S(551,631), S(515,624), S(636,587), S(494,594), S(523,541),
                           S(206,502), S(252,615), S(337,630), S(373,624), S(461,615), S(354,577), S(327,578), S(320,425),
                   },
                   {
                           S(478,569), S(517,591), S(499,573), S(476,593), S(484,594), S(468,609), S(503,562), S(492,537),
                           S(502,587), S(510,576), S(515,568), S(481,600), S(504,594), S(515,580), S(540,583), S(499,559),
                           S(482,595), S(490,595), S(499,600), S(494,597), S(500,601), S(504,588), S(494,578), S(520,578),
                           S(472,588), S(473,602), S(484,607), S(527,590), S(524,582), S(489,589), S(480,593), S(496,571),
                           S(470,604), S(494,601), S(517,589), S(544,595), S(536,581), S(522,594), S(496,593), S(482,604),
                           S(489,607), S(516,591), S(520,582), S(544,568), S(520,587), S(579,580), S(554,590), S(534,610),
                           S(459,575), S(508,580), S(478,592), S(455,594), S(497,580), S(499,577), S(495,589), S(487,567),
                           S(436,602), S(405,610), S(382,601), S(276,639), S(355,617), S(380,600), S(414,589), S(405,575),
                   },
                   {
                           S( 578,1114), S( 577,1114), S( 601,1120), S( 615,1113), S( 623,1103), S( 598,1106), S( 607,1096), S( 594,1069),
                           S( 536,1117), S( 548,1122), S( 583,1116), S( 587,1118), S( 600,1099), S( 600,1089), S( 642,1064), S( 585,1085),
                           S( 528,1126), S( 526,1120), S( 547,1123), S( 562,1127), S( 576,1107), S( 580,1089), S( 628,1054), S( 603,1065),
                           S( 526,1135), S( 517,1141), S( 539,1142), S( 557,1130), S( 574,1120), S( 560,1114), S( 595,1102), S( 576,1096),
                           S( 543,1150), S( 554,1141), S( 560,1154), S( 580,1135), S( 594,1109), S( 611,1107), S( 607,1112), S( 634,1097),
                           S( 560,1146), S( 598,1143), S( 598,1145), S( 607,1137), S( 660,1115), S( 678,1097), S( 751,1094), S( 707,1081),
                           S( 593,1143), S( 594,1160), S( 627,1169), S( 659,1150), S( 638,1148), S( 725,1114), S( 699,1118), S( 744,1084),
                           S( 617,1138), S( 614,1140), S( 598,1164), S( 597,1158), S( 656,1129), S( 647,1145), S( 591,1161), S( 720,1108),
                   },
                   {
                           S(1043,2072), S(1049,2070), S(1071,2066), S(1084,2093), S(1079,2058), S(1030,2080), S(1084,1974), S(1061,2007),
                           S(1057,2068), S(1057,2087), S(1077,2076), S(1076,2087), S(1077,2095), S(1092,2043), S(1097,2007), S(1100,1951),
                           S(1045,2066), S(1048,2102), S(1050,2116), S(1050,2119), S(1048,2130), S(1062,2127), S(1075,2107), S(1070,2101),
                           S(1044,2094), S(1033,2123), S(1033,2137), S(1050,2147), S(1059,2151), S(1049,2164), S(1062,2163), S(1080,2150),
                           S(1029,2108), S(1043,2112), S(1056,2115), S(1049,2160), S(1051,2182), S(1073,2193), S(1073,2208), S(1086,2195),
                           S(1069,2085), S(1059,2098), S(1068,2135), S(1076,2159), S(1091,2196), S(1191,2152), S(1179,2136), S(1150,2179),
                           S(1055,2092), S(1031,2124), S(1038,2170), S(1028,2190), S(1037,2241), S(1128,2183), S(1092,2169), S(1170,2141),
                           S( 980,2127), S( 972,2154), S(1041,2153), S(1090,2131), S(1129,2132), S(1146,2121), S(1266,1990), S(1104,2063),
                   },
                   {
                           S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S( -87, -43), S(-150, -13), S( -19, -61), S( -33,-126),
                           S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(-147,  57), S(-115,  39), S( -31,   3), S( -50, -40),
                           S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(-226,  94), S(-220,  73), S(-145,  31), S(-195,   1),
                           S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(-338, 132), S(-253,  98), S(-244,  71), S(-322,  32),
                           S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(-317, 140), S(-254, 128), S(-222, 102), S(-322,  51),
                           S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(-128, 118), S(  18, 101), S( -25,  99), S( -48,  22),
                           S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(  28,  59), S( -17,  86), S(  54,  73), S(-261,  42),
                           S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(-412,  43), S(-363,  51), S(-308,  48), S( -39,-190),
                   },
           }},
        }};

    constexpr square_t flipSquare(square_t square) {
        return square >> 3 | (square & 7) << 3;
    }

    constexpr auto transformPSTs(const std::array<std::array<std::array<packed_eval_t, 64>, 6>, NUM_KING_BUCKETS>& psts_) {
        std::array<std::array<std::array<packed_eval_t, 64>, 6>, NUM_KING_BUCKETS> result = {};
        for (auto bucket = 0; bucket < NUM_KING_BUCKETS; bucket++) {
            for (piece_t piece = 0; piece <= pcs::KING; piece++) {
                for (square_t square = 0; square < 64; square++) {
                    result[bucket][piece][square] = psts_[bucket][piece][flipSquare(square)];
                }
            }
        }

        return result;
    }

    constexpr auto real_psts = transformPSTs(psts);

    inline eval_t evalFromPacked(packed_eval_t packed, phase_t phase) {
        int32_t mg = int32_t(int16_t(uint16_t((packed + (1U << 15)) >> 16)));
        int32_t eg = int32_t(int16_t(uint16_t(packed)));
        if (phase >= MAX_PHASE)
            return mg;
        else
            return (mg * phase + eg * (MAX_PHASE - phase)) / MAX_PHASE;
    }

    eval_t getStaticEval(const ChessBoard& board) {
        // Step 1: initialize eval and phase
        packed_eval_t packedEval = 0;
        phase_t phase = 0;
        const bitboard_t allPieces = board.getSideBB(sides::WHITE) | board.getSideBB(sides::BLACK);

        // Step 2: Loop through all the piece types, adding up their PSTs and mobility evals
        for (piece_t piece = pcs::PAWN; piece <= pcs::KING; piece++) {
            for (side_t side = 0; side < 2; side++) {
                const square_t kingSquare = log2ll(board.getPieceBB(pcs::KING) & board.getSideBB(side));
                const auto kingBucket = hce::getFriendlyKingBucket(kingSquare, side);
                const bitboard_t notFriendlyPieces = ~board.getSideBB(side);
                const eval_t multiplier = side == sides::WHITE ? 1 : -1;
                bitboard_t remainingPieces = board.getPieceBB(piece) & board.getSideBB(side);
                phase += hce::PHASE_PIECE_VALUES[piece] * std::popcount(remainingPieces);
                bitboard_t squareBB;
                square_t square;
                while (remainingPieces) {
                    squareBB = remainingPieces & -remainingPieces;
                    remainingPieces -= squareBB;
                    square = log2ll(squareBB);

                    // PSTs
                    packedEval += hce::real_psts[kingBucket][piece][square ^ (7 * side)] * multiplier;
                    // Mobility
                    const bitboard_t attacks = getAttackedSquares(square, piece, allPieces, side);
                    packedEval += hce::mobility[piece] * std::popcount(attacks & notFriendlyPieces) * multiplier;

                } // end while remainingPieces
            } // end for loop over side
        } // end for loop over piece type

        // Step 3: Unpack the eval
        eval_t whiteRelativeEval = hce::evalFromPacked(packedEval, phase);

        // Step 4: Return the eval from the perspective of stm
        return (board.getSTM() == sides::WHITE) ? whiteRelativeEval : -whiteRelativeEval;
    }
}

