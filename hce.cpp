#include "hce.h"
#include "logarithm.h"
#include "attacks.h"

namespace hce {
    constexpr phase_t PHASE_PIECE_VALUES[6] = {0,1,1,2,4,0};
    constexpr phase_t MAX_PHASE = 24;

    constexpr packed_eval_t S(int16_t mg, int16_t eg) {
        return (uint32_t(uint16_t(mg)) << 16) + eg;
    }

    constexpr packed_eval_t mobility[6] = {S(-13, -25), S(0, 2), S(9, 12), S(8, 6), S(2, 11), S(-17, -3)};

    constexpr auto NUM_KING_BUCKETS = 2;

    inline auto getFriendlyKingBucket(square_t kingSquare, side_t side) {
        return kingSquare / 32;
    }

    // PSTs are bucketed by the friendly king
    // There are only two buckets:
    // queenside and kingside

    // Note that these PSTs are not the actual PSTs that we will use
    // They are the PSTs output from python-chess, which uses a1 = 0, h1 = 7, a8 = 56, h8 = 63
    // I use a1 = 0, a8 = 7, h1 = 56, h8 = 63
    // Which is reflected across the a1-h8 diagonal from how python-chess does it
    // Anyway, you can visualize these PSTs by pretending they are squares on a board
    // And each entry is S(mg, eg) for a black piece on that square
    constexpr std::array<std::array<std::array<packed_eval_t, 64>, 6>, 2> psts = {{
      {{
               {
                       S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196),
                       S(261,443), S(346,455), S(300,440), S(231,468), S(197,476), S(203,472), S(169,500), S(103,484),
                       S(272,432), S(301,455), S(289,431), S(222,465), S(236,447), S(201,451), S(167,468), S(101,456),
                       S(249,466), S(295,482), S(285,447), S(267,457), S(254,447), S(222,448), S(204,471), S(116,455),
                       S(268,528), S(307,538), S(291,498), S(248,489), S(276,465), S(255,458), S(219,497), S(137,490),
                       S(285,692), S(305,743), S(275,695), S(303,628), S(309,607), S(308,554), S(242,624), S(139,605),
                       S(333,816), S(598,698), S(367,861), S(408,746), S(290,758), S(274,692), S(198,790), S( 81,792),
                       S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196),
               },
               {
                       S( 716,1064), S( 758,1088), S( 778,1106), S( 792,1111), S( 781,1091), S( 790,1079), S( 784,1076), S( 716,1008),
                       S( 787,1079), S( 754,1129), S( 830,1122), S( 851,1130), S( 841,1119), S( 844,1122), S( 822,1082), S( 785,1071),
                       S( 800,1099), S( 824,1121), S( 891,1106), S( 884,1161), S( 885,1157), S( 846,1133), S( 833,1100), S( 805,1096),
                       S( 841,1103), S( 848,1127), S( 896,1157), S( 896,1165), S( 931,1177), S( 884,1163), S( 898,1144), S( 837,1090),
                       S( 842,1103), S( 896,1133), S( 946,1158), S(1005,1140), S( 945,1166), S( 954,1171), S( 896,1135), S( 885,1112),
                       S( 804,1108), S( 929,1105), S( 936,1137), S( 995,1131), S(1016,1137), S( 982,1121), S( 995,1082), S( 804,1120),
                       S( 771,1067), S( 836,1105), S( 925,1084), S( 956,1110), S( 897,1110), S( 938,1105), S( 829,1137), S( 932,1058),
                       S( 607, 938), S( 631,1047), S( 742,1107), S( 786,1066), S( 786,1131), S( 711,1102), S( 755,1077), S( 578, 998),
               },
               {
                       S( 915,1109), S( 862,1145), S( 884,1131), S( 882,1131), S( 902,1115), S( 898,1118), S( 885,1135), S( 880,1080),
                       S( 885,1155), S( 970,1097), S( 959,1095), S( 919,1114), S( 901,1122), S( 916,1104), S( 887,1121), S( 882,1094),
                       S( 910,1130), S( 917,1097), S( 951,1104), S( 928,1108), S( 923,1119), S( 896,1126), S( 895,1111), S( 870,1105),
                       S( 892,1120), S( 928,1116), S( 917,1114), S( 966,1103), S( 938,1104), S( 895,1131), S( 893,1111), S( 892,1132),
                       S( 893,1128), S( 908,1127), S( 929,1116), S( 953,1109), S( 958,1104), S( 947,1096), S( 907,1141), S( 921,1118),
                       S( 855,1168), S( 948,1115), S( 909,1125), S( 980,1098), S( 930,1089), S( 977,1111), S( 966,1109), S( 933,1129),
                       S( 797,1109), S( 844,1130), S( 908,1107), S( 839,1106), S( 828,1130), S( 961,1087), S( 971,1106), S( 918,1106),
                       S( 775,1115), S( 777,1134), S( 777,1142), S( 710,1168), S( 734,1163), S( 622,1160), S( 845,1120), S( 743,1156),
               },
               {
                       S( 960,2005), S(1000,2009), S(1027,2015), S(1052,1997), S(1059,1983), S(1047,1969), S(1055,1959), S(1021,1986),
                       S(1011,1968), S( 991,1990), S(1024,1999), S(1019,2010), S(1010,1997), S(1018,1985), S(1024,1974), S( 988,1973),
                       S(1029,1985), S( 983,2015), S(1030,1994), S(1018,1994), S( 984,2014), S(1000,1987), S(1014,1964), S( 977,1977),
                       S( 986,2002), S(1010,2012), S(1008,2017), S(1020,2015), S( 994,2021), S( 958,2020), S(1003,1997), S( 996,2004),
                       S(1011,2019), S( 986,2030), S(1031,2030), S(1031,2025), S(1026,2005), S(1070,1984), S(1057,1988), S(1038,2003),
                       S(1013,2014), S(1022,2034), S(1065,2020), S(1074,1999), S(1099,1992), S(1076,2007), S(1135,1984), S(1109,1989),
                       S(1109,1986), S(1106,2016), S(1140,2020), S(1150,2001), S(1149,1998), S(1143,1987), S(1107,2005), S(1164,1985),
                       S(1086,1997), S( 913,2059), S(1085,2041), S(1059,2033), S(1001,2048), S(1048,2023), S(1125,2002), S(1077,2031),
               },
               {
                       S(2091,3396), S(2017,3561), S(2072,3588), S(2098,3562), S(2118,3558), S(2117,3530), S(2075,3621), S(2120,3514),
                       S(2042,3581), S(2097,3535), S(2131,3560), S(2135,3622), S(2123,3606), S(2107,3609), S(2127,3553), S(2172,3519),
                       S(2050,3650), S(2084,3668), S(2108,3653), S(2102,3648), S(2118,3622), S(2090,3651), S(2115,3589), S(2095,3670),
                       S(2101,3598), S(2090,3661), S(2104,3637), S(2144,3664), S(2126,3621), S(2101,3642), S(2107,3624), S(2117,3669),
                       S(2090,3654), S(2064,3697), S(2077,3688), S(2108,3683), S(2127,3711), S(2127,3658), S(2122,3669), S(2162,3642),
                       S(2068,3659), S(2081,3670), S(2054,3747), S(2129,3700), S(2147,3706), S(2189,3663), S(2255,3554), S(2230,3621),
                       S(2095,3601), S(2050,3666), S(2053,3748), S(2004,3781), S(2021,3798), S(2146,3635), S(2167,3602), S(2196,3616),
                       S(2042,3526), S(2133,3524), S(2221,3537), S(2154,3608), S(2213,3561), S(2266,3491), S(2214,3482), S(2105,3600),
               },
               {
                       S( 194,-167), S( 249,-134), S( 200, -95), S( 120, -89), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
                       S( 218, -96), S( 222, -61), S( 188, -37), S( 163, -27), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
                       S( 115, -88), S( 147, -38), S(  85,  -5), S(  60,  22), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
                       S(  58, -78), S( 111, -22), S(  53,  26), S(   1,  57), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
                       S(  67, -56), S(  93,  11), S(  90,  48), S( -34,  81), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
                       S( -89, -13), S( 274,   5), S( 141,  44), S( 141,  63), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
                       S(  11, -50), S( 175,   4), S(  75,  38), S( 242,   8), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
                       S( 513,-287), S( 402,-168), S( 476,-142), S( 294, -72), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
               },
       }},
      {{
               {
                       S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196),
                       S(174,462), S(220,482), S(208,461), S(203,469), S(238,487), S(272,456), S(329,442), S(228,400),
                       S(166,445), S(208,460), S(216,441), S(232,459), S(255,446), S(249,440), S(296,435), S(250,398),
                       S(168,459), S(228,470), S(230,443), S(261,434), S(270,432), S(263,433), S(278,454), S(229,417),
                       S(188,503), S(243,499), S(246,469), S(260,456), S(299,441), S(281,456), S(296,483), S(253,461),
                       S(211,625), S(256,658), S(317,607), S(322,584), S(334,565), S(372,553), S(338,647), S(250,616),
                       S(362,718), S(395,725), S(396,734), S(425,668), S(408,667), S(376,704), S(239,768), S(182,772),
                       S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196), S(102,196),
               },
               {
                       S( 721,1062), S( 817,1062), S( 801,1097), S( 832,1113), S( 836,1119), S( 837,1101), S( 825,1081), S( 752,1082),
                       S( 788,1094), S( 809,1117), S( 841,1139), S( 867,1140), S( 872,1137), S( 871,1123), S( 838,1105), S( 829,1112),
                       S( 800,1092), S( 837,1129), S( 868,1142), S( 890,1180), S( 910,1168), S( 888,1130), S( 878,1114), S( 836,1100),
                       S( 830,1132), S( 864,1148), S( 897,1188), S( 904,1182), S( 924,1192), S( 909,1163), S( 905,1145), S( 857,1114),
                       S( 850,1139), S( 883,1157), S( 924,1182), S( 966,1192), S( 936,1188), S( 988,1177), S( 909,1172), S( 927,1113),
                       S( 850,1121), S( 919,1139), S( 972,1164), S( 975,1167), S(1042,1136), S(1062,1127), S( 974,1123), S( 934,1085),
                       S( 821,1097), S( 867,1127), S( 899,1148), S( 941,1142), S( 908,1133), S(1027,1099), S( 887,1101), S( 919,1049),
                       S( 596,1013), S( 645,1123), S( 729,1140), S( 759,1134), S( 853,1125), S( 741,1089), S( 715,1088), S( 712, 934),
               },
               {
                       S( 909,1104), S( 946,1128), S( 929,1109), S( 904,1129), S( 914,1129), S( 898,1145), S( 933,1097), S( 921,1070),
                       S( 931,1120), S( 939,1113), S( 944,1105), S( 911,1136), S( 934,1130), S( 945,1116), S( 970,1119), S( 928,1096),
                       S( 911,1131), S( 919,1130), S( 928,1136), S( 924,1133), S( 929,1136), S( 933,1125), S( 923,1114), S( 950,1113),
                       S( 902,1124), S( 903,1137), S( 913,1142), S( 957,1125), S( 953,1118), S( 919,1124), S( 910,1129), S( 927,1106),
                       S( 900,1139), S( 924,1136), S( 946,1123), S( 973,1132), S( 965,1118), S( 952,1130), S( 926,1129), S( 912,1140),
                       S( 918,1143), S( 945,1126), S( 948,1119), S( 976,1100), S( 948,1123), S(1007,1118), S( 984,1123), S( 962,1147),
                       S( 890,1110), S( 940,1115), S( 910,1125), S( 883,1131), S( 926,1115), S( 931,1110), S( 927,1123), S( 916,1103),
                       S( 865,1136), S( 838,1146), S( 812,1134), S( 707,1175), S( 786,1149), S( 808,1138), S( 846,1122), S( 835,1108),
               },
               {
                       S(1074,2029), S(1072,2029), S(1096,2035), S(1111,2029), S(1119,2018), S(1094,2021), S(1102,2012), S(1090,1984),
                       S(1031,2033), S(1043,2037), S(1080,2032), S(1082,2033), S(1096,2014), S(1096,2004), S(1136,1977), S(1079,1999),
                       S(1023,2042), S(1021,2036), S(1042,2038), S(1057,2043), S(1071,2024), S(1075,2006), S(1123,1968), S(1098,1979),
                       S(1020,2051), S(1014,2056), S(1036,2056), S(1054,2044), S(1069,2036), S(1056,2031), S(1090,2017), S(1071,2012),
                       S(1039,2064), S(1050,2057), S(1055,2070), S(1076,2051), S(1088,2025), S(1106,2023), S(1105,2026), S(1129,2013),
                       S(1058,2060), S(1093,2059), S(1095,2061), S(1104,2051), S(1156,2031), S(1172,2012), S(1244,2009), S(1200,1998),
                       S(1089,2058), S(1090,2074), S(1124,2083), S(1157,2064), S(1135,2063), S(1224,2028), S(1198,2032), S(1242,1999),
                       S(1111,2054), S(1110,2057), S(1092,2081), S(1091,2074), S(1154,2043), S(1146,2059), S(1088,2075), S(1220,2020),
               },
               {
                       S(2130,3704), S(2137,3705), S(2159,3700), S(2173,3725), S(2167,3690), S(2118,3712), S(2173,3610), S(2151,3637),
                       S(2146,3702), S(2146,3720), S(2165,3709), S(2165,3719), S(2165,3727), S(2181,3674), S(2185,3639), S(2188,3589),
                       S(2134,3698), S(2137,3733), S(2137,3751), S(2137,3754), S(2136,3763), S(2151,3759), S(2164,3739), S(2161,3730),
                       S(2131,3729), S(2120,3757), S(2122,3769), S(2138,3780), S(2146,3784), S(2137,3799), S(2149,3794), S(2170,3780),
                       S(2117,3741), S(2131,3744), S(2143,3751), S(2137,3794), S(2139,3816), S(2161,3827), S(2160,3840), S(2176,3826),
                       S(2159,3717), S(2145,3731), S(2156,3770), S(2162,3793), S(2178,3828), S(2279,3782), S(2268,3768), S(2236,3810),
                       S(2143,3728), S(2120,3758), S(2127,3800), S(2117,3824), S(2127,3872), S(2213,3818), S(2180,3800), S(2257,3775),
                       S(2064,3764), S(2057,3790), S(2125,3788), S(2181,3763), S(2214,3766), S(2241,3746), S(2369,3611), S(2195,3694),
               },
               {
                       S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S( -86, -43), S(-149, -13), S( -17, -62), S( -32,-126),
                       S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(-145,  57), S(-114,  40), S( -30,   4), S( -49, -40),
                       S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(-224,  94), S(-218,  72), S(-142,  29), S(-194,   1),
                       S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(-338, 132), S(-256,  99), S(-247,  72), S(-327,  33),
                       S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(-322, 141), S(-257, 129), S(-226, 102), S(-321,  51),
                       S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(-141, 120), S(   2, 105), S( -37, 101), S( -59,  26),
                       S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(  41,  57), S(  -4,  82), S(  59,  71), S(-247,  40),
                       S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(-383,  37), S(-350,  49), S(-297,  47), S( -21,-193),
               },
       }},
}};

    constexpr square_t flipSquare(square_t square) {
        return square >> 3 | (square & 7) << 3;
    }

    constexpr auto transformPSTs(const std::array<std::array<std::array<packed_eval_t, 64>, 6>, NUM_KING_BUCKETS>& psts_) {
        std::array<std::array<std::array<packed_eval_t, 64>, 6>, NUM_KING_BUCKETS> result = {};
        for (auto bucket = 0; bucket < NUM_KING_BUCKETS; bucket++) {
            for (piece_t piece = 0; piece <= pcs::KING; piece++) {
                for (square_t square = 0; square < 64; square++) {
                    result[bucket][piece][square] = psts_[bucket][piece][flipSquare(square)];
                }
            }
        }

        return result;
    }

    constexpr auto real_psts = transformPSTs(psts);

    inline eval_t evalFromPacked(packed_eval_t packed, phase_t phase) {
        int32_t mg = int32_t(int16_t(uint16_t((packed + (1U << 15)) >> 16)));
        int32_t eg = int32_t(int16_t(uint16_t(packed)));
        if (phase >= MAX_PHASE)
            return mg;
        else
            return (mg * phase + eg * (MAX_PHASE - phase)) / MAX_PHASE;
    }

    eval_t getStaticEval(const ChessBoard& board) {
        // Step 1: initialize eval and phase
        packed_eval_t packedEval = 0;
        phase_t phase = 0;
        const bitboard_t allPieces = board.getSideBB(sides::WHITE) | board.getSideBB(sides::BLACK);

        // Step 2: Loop through all the piece types, adding up their PSTs and mobility evals
        for (piece_t piece = pcs::PAWN; piece <= pcs::KING; piece++) {
            for (side_t side = 0; side < 2; side++) {
                const square_t kingSquare = log2ll(board.getPieceBB(pcs::KING) & board.getSideBB(side));
                const auto kingBucket = hce::getFriendlyKingBucket(kingSquare, side);
                const bitboard_t notFriendlyPieces = ~board.getSideBB(side);
                const eval_t multiplier = side == sides::WHITE ? 1 : -1;
                bitboard_t remainingPieces = board.getPieceBB(piece) & board.getSideBB(side);
                phase += hce::PHASE_PIECE_VALUES[piece] * std::popcount(remainingPieces);
                bitboard_t squareBB;
                square_t square;
                while (remainingPieces) {
                    squareBB = remainingPieces & -remainingPieces;
                    remainingPieces -= squareBB;
                    square = log2ll(squareBB);

                    // PSTs
                    packedEval += hce::real_psts[kingBucket][piece][square ^ (7 * side)] * multiplier;
                    // Mobility
                    const bitboard_t attacks = getAttackedSquares(square, piece, allPieces, side);
                    packedEval += hce::mobility[piece] * std::popcount(attacks & notFriendlyPieces) * multiplier;

                } // end while remainingPieces
            } // end for loop over side
        } // end for loop over piece type

        // Step 3: Unpack the eval
        eval_t whiteRelativeEval = hce::evalFromPacked(packedEval, phase);

        // Step 4: Return the eval from the perspective of stm
        return (board.getSTM() == sides::WHITE) ? whiteRelativeEval : -whiteRelativeEval;
    }
}

