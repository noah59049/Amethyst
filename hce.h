#pragma once

#include "typedefs.h"
#include "flags.h"

namespace hce {
    constexpr phase_t PHASE_PIECE_VALUES[6] = {0,1,1,2,4,0};
    constexpr phase_t MAX_PHASE = 24;

    constexpr packed_eval_t S(int16_t mg, int16_t eg) {
        return (uint32_t(uint16_t(mg)) << 16) + eg;
    }

    constexpr packed_eval_t mobility[6] = {S(-14, -23), S(-3, 14), S(9, 13), S(6, 10), S(-4, 53), S(-31, 1)};

    // Note that these PSTs are not the actual PSTs that we will use
    // They are the PSTs output from python-chess, which uses a1 = 0, h1 = 7, a8 = 56, h8 = 63
    // I use a1 = 0, a8 = 7, h1 = 56, h8 = 63
    // Which is reflected across the a1-h8 diagonal from how python-chess does it
    // Anyway, you can visualize these PSTs by pretending they are squares on a board
    // And each entry is S(mg, eg) for a black piece on that square
    constexpr std::array<std::array<packed_eval_t, 64>, 6> psts = {{
            {
                    S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0),
                    S( 72,255), S(119,272), S(109,251), S( 94,266), S(126,274), S(139,251), S(173,247), S( 78,217),
                    S( 66,239), S(104,253), S(115,233), S(122,251), S(145,235), S(128,234), S(156,233), S(109,206),
                    S( 66,256), S(123,266), S(127,237), S(154,231), S(160,228), S(146,227), S(145,248), S( 92,218),
                    S( 85,303), S(138,301), S(141,268), S(152,253), S(188,236), S(170,243), S(169,272), S(118,256),
                    S(110,430), S(148,469), S(201,412), S(207,376), S(221,357), S(256,333), S(223,409), S(119,389),
                    S(237,528), S(317,494), S(261,544), S(304,467), S(279,464), S(248,469), S(136,538), S( 58,542),
                    S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0),
            },
            {
                    S(282,482), S(393,460), S(372,491), S(403,505), S(410,500), S(403,484), S(397,473), S(314,484),
                    S(365,492), S(383,508), S(420,502), S(446,507), S(449,504), S(439,494), S(400,490), S(393,503),
                    S(381,480), S(420,488), S(462,478), S(479,520), S(497,507), S(472,474), S(457,471), S(415,486),
                    S(415,508), S(445,509), S(487,518), S(493,516), S(514,529), S(494,502), S(487,509), S(437,491),
                    S(436,512), S(473,512), S(515,512), S(562,512), S(527,514), S(573,508), S(497,518), S(505,497),
                    S(438,499), S(508,492), S(559,490), S(568,490), S(629,469), S(620,467), S(564,477), S(500,478),
                    S(412,476), S(455,500), S(496,489), S(526,498), S(493,481), S(604,453), S(452,495), S(502,446),
                    S(201,418), S(269,494), S(354,507), S(420,485), S(435,508), S(355,471), S(317,496), S(287,370),
            },
            {
                    S(434,504), S(471,524), S(456,505), S(429,522), S(441,517), S(422,532), S(441,504), S(434,479),
                    S(454,524), S(472,500), S(474,494), S(440,524), S(461,519), S(461,506), S(483,505), S(445,488),
                    S(444,519), S(450,511), S(462,517), S(458,517), S(462,519), S(461,513), S(452,501), S(469,500),
                    S(435,515), S(435,525), S(449,521), S(490,507), S(484,501), S(448,511), S(443,513), S(454,502),
                    S(441,527), S(457,524), S(477,511), S(503,512), S(497,499), S(485,512), S(458,517), S(450,525),
                    S(449,538), S(486,513), S(476,511), S(504,493), S(483,500), S(539,503), S(520,510), S(503,524),
                    S(434,497), S(461,508), S(447,514), S(425,516), S(460,507), S(470,498), S(469,509), S(457,498),
                    S(398,526), S(367,538), S(350,536), S(290,560), S(328,547), S(351,529), S(376,523), S(355,517),
            },
            {
                    S(554,940), S(553,944), S(575,948), S(584,942), S(597,929), S(561,939), S(581,918), S(554,922),
                    S(515,945), S(526,950), S(560,947), S(557,952), S(572,933), S(558,927), S(585,906), S(537,922),
                    S(510,956), S(508,952), S(530,950), S(541,953), S(549,940), S(549,924), S(587,893), S(560,906),
                    S(511,961), S(506,967), S(523,967), S(539,957), S(551,951), S(531,949), S(560,941), S(548,936),
                    S(534,972), S(543,966), S(543,976), S(566,959), S(573,936), S(588,936), S(595,938), S(606,935),
                    S(552,965), S(586,965), S(589,964), S(596,952), S(641,937), S(642,932), S(718,924), S(668,920),
                    S(585,958), S(583,977), S(616,983), S(651,963), S(631,964), S(690,939), S(660,945), S(709,920),
                    S(597,956), S(563,971), S(567,987), S(568,977), S(597,963), S(606,966), S(594,967), S(641,950),
            },
            {
                    S( 858,1297), S( 863,1281), S( 887,1256), S( 895,1318), S( 892,1266), S( 846,1300), S( 881,1273), S( 884,1258),
                    S( 878,1283), S( 885,1255), S( 903,1255), S( 901,1272), S( 900,1281), S( 902,1239), S( 909,1224), S( 930,1232),
                    S( 872,1257), S( 878,1266), S( 893,1198), S( 890,1192), S( 892,1212), S( 893,1256), S( 897,1291), S( 886,1347),
                    S( 876,1266), S( 877,1209), S( 886,1152), S( 914,1119), S( 920,1112), S( 890,1213), S( 892,1281), S( 904,1362),
                    S( 870,1273), S( 883,1190), S( 912,1110), S( 919,1085), S( 925,1109), S( 925,1185), S( 910,1307), S( 921,1359),
                    S( 900,1265), S( 912,1176), S( 921,1132), S( 936,1142), S( 955,1153), S(1040,1155), S(1024,1215), S( 990,1351),
                    S( 900,1276), S( 872,1221), S( 890,1216), S( 905,1192), S( 910,1238), S( 974,1218), S( 944,1228), S(1005,1305),
                    S( 929,1145), S( 947,1129), S( 993,1118), S(1001,1114), S(1044,1128), S(1074,1127), S(1103,1090), S(1000,1153),
            },
            {
                    S( -27, -88), S(  76, -67), S(  26, -23), S(-111,  -6), S( -12, -32), S( -84,  -2), S(  45, -50), S(  10,-111),
                    S(  35, -29), S(  40,   6), S(   4,  31), S( -42,  47), S( -51,  55), S( -24,  41), S(  52,   9), S(  12, -29),
                    S(-107, -10), S( -24,  29), S(-100,  66), S(-121,  91), S(-117,  89), S(-124,  75), S( -58,  37), S(-139,  18),
                    S(-147,   0), S( -79,  50), S(-137,  98), S(-197, 127), S(-210, 129), S(-145, 101), S(-146,  78), S(-259,  51),
                    S(-138,  18), S( -51,  70), S( -80, 108), S(-190, 137), S(-150, 134), S(-116, 129), S( -99, 105), S(-258,  71),
                    S(-190,  39), S( 110,  67), S(  -9,  98), S(  -5, 114), S(  44, 116), S( 147, 107), S(  81, 109), S( -96,  62),
                    S(-128,   7), S( 128,  44), S(  30,  72), S( 208,  38), S( 150,  72), S( 104,  95), S( 147,  86), S( -98,  51),
                    S(  45,-139), S( 136, -75), S( 186, -48), S(  29,  15), S(  55,  -2), S( 131,   1), S( 117,   7), S( 287,-186),
            },
    }};

    constexpr square_t flipSquare(square_t square) {
        return square >> 3 | (square & 7) << 3;
    }

    constexpr auto transformPSTs(const std::array<std::array<packed_eval_t, 64>, 6>& psts_) {
        std::array<std::array<packed_eval_t, 64>, 6> result = {};
        for (piece_t piece = 0; piece <= pcs::KING; piece++) {
            for (square_t square = 0; square < 64; square++) {
                result[piece][square] = psts_[piece][flipSquare(square)];
            }
        }

        return result;
    }

    constexpr auto real_psts = transformPSTs(psts);

    inline eval_t evalFromPacked(packed_eval_t packed, phase_t phase) {
        int32_t mg = int32_t(int16_t(uint16_t((packed + (1U << 15)) >> 16)));
        int32_t eg = int32_t(int16_t(uint16_t(packed)));
        if (phase >= MAX_PHASE)
            return mg;
        else
            return (mg * phase + eg * (MAX_PHASE - phase)) / MAX_PHASE;
    }
}