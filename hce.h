#pragma once

#include "typedefs.h"
#include "flags.h"

namespace hce {
    constexpr phase_t PHASE_PIECE_VALUES[6] = {0,1,1,2,4,0};
    constexpr phase_t MAX_PHASE = 24;

    constexpr packed_eval_t S(int16_t mg, int16_t eg) {
        return (uint32_t(uint16_t(mg)) << 16) + eg;
    }

    constexpr packed_eval_t mobility[6] = {S(-14, -25), S(0, -1), S(9, 12), S(8, 6), S(3, 10), S(-30, 1)};

    // Note that these PSTs are not the actual PSTs that we will use
    // They are the PSTs output from python-chess, which uses a1 = 0, h1 = 7, a8 = 56, h8 = 63
    // I use a1 = 0, a8 = 7, h1 = 56, h8 = 63
    // Which is reflected across the a1-h8 diagonal from how python-chess does it
    // Anyway, you can visualize these PSTs by pretending they are squares on a board
    // And each entry is S(mg, eg) for a black piece on that square
    constexpr std::array<std::array<packed_eval_t, 64>, 6> psts = {{
           {
                   S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0),
                   S( 79,266), S(123,290), S(113,268), S( 98,279), S(131,289), S(146,268), S(183,265), S( 86,229),
                   S( 72,252), S(108,271), S(117,249), S(126,266), S(148,252), S(133,249), S(165,250), S(117,218),
                   S( 70,270), S(126,284), S(129,254), S(157,247), S(163,243), S(150,244), S(153,265), S( 99,233),
                   S( 87,321), S(141,321), S(144,288), S(154,271), S(192,253), S(174,260), S(176,291), S(125,273),
                   S(111,458), S(147,502), S(203,443), S(210,405), S(223,384), S(260,357), S(229,437), S(122,417),
                   S(243,564), S(326,528), S(265,588), S(307,505), S(271,502), S(245,507), S(133,577), S( 58,579),
                   S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0),
           },
           {
                   S(284,589), S(408,565), S(390,604), S(419,618), S(425,618), S(415,604), S(412,577), S(327,578),
                   S(378,595), S(392,630), S(430,647), S(457,649), S(459,644), S(448,640), S(412,615), S(404,616),
                   S(390,607), S(427,640), S(464,654), S(481,693), S(500,681), S(476,643), S(463,624), S(425,608),
                   S(423,635), S(451,660), S(489,699), S(496,697), S(517,707), S(497,682), S(494,660), S(445,620),
                   S(445,638), S(477,669), S(517,697), S(564,700), S(528,705), S(575,693), S(501,678), S(516,622),
                   S(448,622), S(511,648), S(561,675), S(570,679), S(632,654), S(625,650), S(570,630), S(502,610),
                   S(417,590), S(461,626), S(499,646), S(543,645), S(492,643), S(605,614), S(454,621), S(508,560),
                   S(191,494), S(252,603), S(343,635), S(386,619), S(406,646), S(336,586), S(359,581), S(296,437),
           },
           {
                   S(459,575), S(494,604), S(482,578), S(456,600), S(465,598), S(444,612), S(465,582), S(456,552),
                   S(477,601), S(494,582), S(497,574), S(463,603), S(484,598), S(485,587), S(504,591), S(466,566),
                   S(465,602), S(470,595), S(484,600), S(478,599), S(482,604), S(482,596), S(470,585), S(490,581),
                   S(456,596), S(456,606), S(468,607), S(512,592), S(505,585), S(467,598), S(462,596), S(473,584),
                   S(461,605), S(475,607), S(499,593), S(525,597), S(518,585), S(507,592), S(476,603), S(467,607),
                   S(468,619), S(504,593), S(497,592), S(525,577), S(503,583), S(557,586), S(541,587), S(522,611),
                   S(453,574), S(478,588), S(464,593), S(443,592), S(478,583), S(487,575), S(488,587), S(472,576),
                   S(426,594), S(365,618), S(355,613), S(233,654), S(323,626), S(339,613), S(393,600), S(372,591),
           },
           {
                   S( 546,1115), S( 547,1119), S( 569,1125), S( 580,1119), S( 591,1106), S( 557,1112), S( 578,1095), S( 552,1094),
                   S( 506,1117), S( 514,1124), S( 551,1122), S( 549,1126), S( 563,1107), S( 551,1102), S( 578,1081), S( 533,1092),
                   S( 499,1129), S( 497,1128), S( 517,1127), S( 530,1129), S( 539,1116), S( 540,1100), S( 583,1068), S( 555,1077),
                   S( 498,1137), S( 493,1144), S( 509,1145), S( 527,1136), S( 537,1130), S( 520,1126), S( 553,1113), S( 540,1108),
                   S( 518,1151), S( 528,1146), S( 526,1160), S( 549,1144), S( 557,1119), S( 575,1113), S( 583,1114), S( 601,1106),
                   S( 536,1147), S( 574,1145), S( 569,1149), S( 580,1138), S( 624,1122), S( 625,1114), S( 701,1104), S( 668,1093),
                   S( 571,1142), S( 566,1162), S( 600,1170), S( 636,1150), S( 613,1152), S( 674,1123), S( 658,1120), S( 718,1092),
                   S( 593,1138), S( 546,1158), S( 555,1176), S( 553,1168), S( 587,1153), S( 614,1143), S( 598,1144), S( 617,1140),
           },
           {
                   S( 957,2105), S( 960,2113), S( 983,2110), S( 995,2139), S( 988,2108), S( 942,2110), S( 970,2084), S( 964,2080),
                   S( 967,2117), S( 969,2121), S( 987,2121), S( 988,2137), S( 986,2146), S( 989,2099), S(1001,2046), S(1029,2006),
                   S( 952,2124), S( 957,2160), S( 959,2171), S( 958,2173), S( 961,2176), S( 968,2180), S( 980,2155), S( 981,2153),
                   S( 954,2150), S( 944,2180), S( 944,2189), S( 961,2208), S( 968,2200), S( 955,2216), S( 970,2206), S( 988,2203),
                   S( 947,2163), S( 951,2179), S( 961,2176), S( 955,2221), S( 963,2239), S( 983,2235), S( 984,2249), S(1005,2226),
                   S( 982,2140), S( 970,2152), S( 971,2204), S( 981,2226), S( 999,2250), S(1088,2206), S(1100,2160), S(1079,2197),
                   S( 976,2135), S( 937,2179), S( 939,2234), S( 923,2260), S( 932,2305), S(1030,2218), S( 999,2194), S(1082,2167),
                   S( 931,2105), S( 897,2173), S( 948,2196), S( 959,2208), S(1011,2193), S(1165,2055), S(1116,2051), S(1031,2089),
           },
           {
                   S(  54,-145), S( 157,-117), S( 107, -73), S( -34, -53), S(  67, -83), S(  -8, -48), S( 127,-100), S(  90,-161),
                   S( 110, -77), S( 113, -36), S(  77,  -9), S(  28,   7), S(  19,  16), S(  48,   0), S( 128, -33), S(  89, -73),
                   S( -48, -50), S(  38, -10), S( -41,  29), S( -63,  55), S( -61,  54), S( -63,  38), S(   8,  -2), S( -75, -23),
                   S(-105, -39), S( -49,  16), S(-103,  63), S(-162,  94), S(-172,  95), S(-100,  66), S(-100,  42), S(-203,  10),
                   S(-125, -17), S( -25,  37), S( -59,  76), S(-180, 107), S(-136, 105), S( -85,  97), S( -62,  72), S(-213,  34),
                   S(-257,  17), S( 110,  37), S( -30,  72), S( -32,  89), S(  23,  90), S( 183,  75), S( 137,  74), S( -61,  27),
                   S(-215, -10), S(  84,  19), S( -39,  52), S( 209,   3), S( 127,  44), S( 104,  68), S( 234,  45), S( -40,  14),
                   S( -21,-179), S(  31,-105), S( 110, -82), S( -97,  -4), S( -18, -30), S(  99, -32), S( 134, -35), S( 199,-216),
           },
        }};

    constexpr square_t flipSquare(square_t square) {
        return square >> 3 | (square & 7) << 3;
    }

    constexpr auto transformPSTs(const std::array<std::array<packed_eval_t, 64>, 6>& psts_) {
        std::array<std::array<packed_eval_t, 64>, 6> result = {};
        for (piece_t piece = 0; piece <= pcs::KING; piece++) {
            for (square_t square = 0; square < 64; square++) {
                result[piece][square] = psts_[piece][flipSquare(square)];
            }
        }

        return result;
    }

    constexpr auto real_psts = transformPSTs(psts);

    inline eval_t evalFromPacked(packed_eval_t packed, phase_t phase) {
        int32_t mg = int32_t(int16_t(uint16_t((packed + (1U << 15)) >> 16)));
        int32_t eg = int32_t(int16_t(uint16_t(packed)));
        if (phase >= MAX_PHASE)
            return mg;
        else
            return (mg * phase + eg * (MAX_PHASE - phase)) / MAX_PHASE;
    }
}