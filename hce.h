#pragma once

#include "typedefs.h"
#include "flags.h"

namespace hce {
    constexpr phase_t PHASE_PIECE_VALUES[6] = {0,1,1,2,4,0};
    constexpr phase_t MAX_PHASE = 24;

    constexpr packed_eval_t S(int16_t mg, int16_t eg) {
        return (uint32_t(uint16_t(mg)) << 16) + eg;
    }

    constexpr packed_eval_t mobility[6] = {S(-14, -25), S(-1, 1), S(9, 12), S(8, 6), S(3, 9), S(-31, 1)};

    // Note that these PSTs are not the actual PSTs that we will use
    // They are the PSTs output from python-chess, which uses a1 = 0, h1 = 7, a8 = 56, h8 = 63
    // I use a1 = 0, a8 = 7, h1 = 56, h8 = 63
    // Which is reflected across the a1-h8 diagonal from how python-chess does it
    // Anyway, you can visualize these PSTs by pretending they are squares on a board
    // And each entry is S(mg, eg) for a black piece on that square
    constexpr std::array<std::array<packed_eval_t, 64>, 6> psts = {{
           {
                   S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0),
                   S( 79,267), S(123,290), S(114,267), S( 99,277), S(131,289), S(147,268), S(184,264), S( 87,229),
                   S( 72,252), S(109,270), S(118,248), S(126,265), S(148,252), S(134,249), S(165,249), S(117,218),
                   S( 71,270), S(127,284), S(130,253), S(158,246), S(164,242), S(151,243), S(154,264), S(100,232),
                   S( 87,320), S(142,320), S(145,287), S(155,270), S(193,253), S(174,259), S(177,290), S(125,272),
                   S(112,457), S(148,500), S(204,441), S(211,403), S(225,382), S(261,355), S(226,438), S(124,415),
                   S(243,564), S(328,525), S(264,586), S(308,501), S(278,498), S(249,504), S(133,578), S( 58,581),
                   S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0),
           },
           {
                   S(298,568), S(412,558), S(392,600), S(424,611), S(430,611), S(420,597), S(415,574), S(332,565),
                   S(382,590), S(398,619), S(436,636), S(462,639), S(465,634), S(453,630), S(417,606), S(408,610),
                   S(395,597), S(432,629), S(470,641), S(488,679), S(505,669), S(482,631), S(469,614), S(429,600),
                   S(428,627), S(456,649), S(495,686), S(502,684), S(523,695), S(503,669), S(499,649), S(450,612),
                   S(450,630), S(483,659), S(524,683), S(571,687), S(534,691), S(582,680), S(507,667), S(521,615),
                   S(452,614), S(518,636), S(567,662), S(577,665), S(641,639), S(632,636), S(576,618), S(516,594),
                   S(423,582), S(466,619), S(504,635), S(534,642), S(504,626), S(619,597), S(462,612), S(520,550),
                   S(203,488), S(267,590), S(349,624), S(395,608), S(440,624), S(355,582), S(313,595), S(297,438),
           },
           {
                   S(462,577), S(498,602), S(485,578), S(459,599), S(469,596), S(446,611), S(468,581), S(461,552),
                   S(480,600), S(497,580), S(501,573), S(466,603), S(487,597), S(487,587), S(507,590), S(468,566),
                   S(468,600), S(473,594), S(487,600), S(481,599), S(485,603), S(485,596), S(473,584), S(493,580),
                   S(458,594), S(459,606), S(471,607), S(515,591), S(508,585), S(470,598), S(465,595), S(475,584),
                   S(463,604), S(478,607), S(501,592), S(528,597), S(521,584), S(508,593), S(479,602), S(470,606),
                   S(472,617), S(508,592), S(499,593), S(530,574), S(509,581), S(562,585), S(543,588), S(525,608),
                   S(455,573), S(484,586), S(465,593), S(438,593), S(477,586), S(491,575), S(490,588), S(477,574),
                   S(423,596), S(382,613), S(366,609), S(259,645), S(333,623), S(359,605), S(398,596), S(378,587),
           },
           {
                   S( 555,1106), S( 556,1110), S( 578,1116), S( 589,1111), S( 600,1097), S( 565,1104), S( 588,1086), S( 560,1086),
                   S( 516,1108), S( 526,1114), S( 560,1113), S( 559,1118), S( 572,1099), S( 560,1094), S( 589,1073), S( 542,1084),
                   S( 510,1119), S( 507,1118), S( 527,1117), S( 540,1120), S( 548,1107), S( 549,1091), S( 592,1059), S( 564,1068),
                   S( 509,1127), S( 502,1135), S( 520,1136), S( 537,1127), S( 547,1121), S( 530,1116), S( 564,1103), S( 550,1099),
                   S( 529,1141), S( 539,1136), S( 538,1150), S( 559,1134), S( 568,1109), S( 585,1104), S( 598,1102), S( 609,1098),
                   S( 547,1136), S( 582,1137), S( 581,1139), S( 592,1127), S( 637,1111), S( 639,1102), S( 724,1090), S( 675,1085),
                   S( 583,1131), S( 577,1152), S( 611,1160), S( 646,1141), S( 626,1141), S( 689,1110), S( 662,1115), S( 721,1086),
                   S( 610,1125), S( 572,1143), S( 571,1164), S( 568,1156), S( 611,1137), S( 622,1134), S( 610,1135), S( 667,1115),
           },
           {
                   S( 950,2123), S( 953,2129), S( 977,2127), S( 988,2155), S( 981,2125), S( 933,2129), S( 966,2093), S( 964,2087),
                   S( 960,2133), S( 963,2137), S( 980,2139), S( 981,2155), S( 979,2163), S( 982,2117), S( 994,2063), S(1023,2021),
                   S( 945,2140), S( 950,2177), S( 952,2191), S( 951,2192), S( 954,2196), S( 961,2197), S( 974,2172), S( 974,2167),
                   S( 948,2167), S( 937,2199), S( 937,2209), S( 954,2230), S( 960,2222), S( 948,2235), S( 963,2224), S( 983,2217),
                   S( 940,2181), S( 943,2200), S( 953,2198), S( 949,2242), S( 953,2265), S( 975,2257), S( 978,2265), S( 999,2242),
                   S( 976,2156), S( 965,2172), S( 963,2224), S( 977,2241), S( 995,2266), S(1081,2227), S(1092,2180), S(1073,2214),
                   S( 973,2146), S( 930,2197), S( 934,2252), S( 924,2270), S( 933,2315), S(1023,2238), S( 994,2207), S(1078,2180),
                   S( 924,2123), S( 900,2180), S( 953,2202), S( 968,2213), S(1022,2195), S(1040,2164), S(1100,2076), S(1017,2111),
           },
           {
                   S( -22,-101), S(  82, -74), S(  32, -30), S(-110, -10), S(  -9, -41), S( -84,  -6), S(  51, -57), S(  15,-118),
                   S(  34, -33), S(  39,   7), S(   2,  33), S( -47,  50), S( -56,  59), S( -27,  43), S(  53,  10), S(  14, -30),
                   S(-122,  -9), S( -36,  32), S(-119,  72), S(-139,  98), S(-136,  96), S(-139,  80), S( -66,  40), S(-150,  20),
                   S(-182,   3), S(-119,  57), S(-176, 106), S(-238, 137), S(-246, 138), S(-175, 109), S(-173,  85), S(-289,  56),
                   S(-194,  25), S(-110,  80), S(-143, 120), S(-261, 151), S(-214, 147), S(-162, 140), S(-139, 115), S(-291,  77),
                   S(-263,  48), S(  34,  80), S( -97, 113), S( -96, 131), S( -41, 131), S(  98, 119), S(  50, 118), S(-124,  69),
                   S(-221,  18), S(   2,  62), S( -85,  89), S(  99,  53), S(  32,  91), S(  13, 113), S(  95,  99), S(-118,  57),
                   S( -93,-137), S( -52, -61), S(  12, -33), S(-159,  36), S( -86,  12), S(   7,  15), S(  59,   9), S( 320,-211),
           },
        }};

    constexpr square_t flipSquare(square_t square) {
        return square >> 3 | (square & 7) << 3;
    }

    constexpr auto transformPSTs(const std::array<std::array<packed_eval_t, 64>, 6>& psts_) {
        std::array<std::array<packed_eval_t, 64>, 6> result = {};
        for (piece_t piece = 0; piece <= pcs::KING; piece++) {
            for (square_t square = 0; square < 64; square++) {
                result[piece][square] = psts_[piece][flipSquare(square)];
            }
        }

        return result;
    }

    constexpr auto real_psts = transformPSTs(psts);

    inline eval_t evalFromPacked(packed_eval_t packed, phase_t phase) {
        int32_t mg = int32_t(int16_t(uint16_t((packed + (1U << 15)) >> 16)));
        int32_t eg = int32_t(int16_t(uint16_t(packed)));
        if (phase >= MAX_PHASE)
            return mg;
        else
            return (mg * phase + eg * (MAX_PHASE - phase)) / MAX_PHASE;
    }
}