#pragma once

#include "typedefs.h"
#include "flags.h"

namespace hce {
    constexpr phase_t PHASE_PIECE_VALUES[6] = {0,1,1,2,4,0};
    constexpr phase_t MAX_PHASE = 24;

    constexpr packed_eval_t S(int16_t mg, int16_t eg) {
        return (uint32_t(uint16_t(mg)) << 16) + eg;
    }

    // Note that these PSTs are not the actual PSTs that we will use
    // They are the PSTs output from python-chess, which uses a1 = 0, h1 = 7, a8 = 56, h8 = 63
    // I use a1 = 0, a8 = 7, h1 = 56, h8 = 63
    // Which is reflected across the a1-h8 diagonal from how python-chess does it
    // Anyway, you can visualize these PSTs by pretending they are squares on a board
    // And each entry is S(mg, eg) for a black piece on that square
    constexpr std::array<std::array<packed_eval_t, 64>, 6> psts = {{
            {
                    S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0),
                    S( 50,216), S( 97,216), S( 88,192), S( 71,197), S(107,213), S(133,191), S(172,189), S( 89,179),
                    S( 50,204), S( 95,203), S( 95,176), S( 98,193), S(125,185), S(102,179), S(156,187), S(104,173),
                    S( 53,213), S(103,209), S(100,177), S(132,173), S(132,169), S(115,172), S(129,190), S( 89,177),
                    S( 74,255), S(119,236), S(125,201), S(129,187), S(168,173), S(150,177), S(157,210), S(113,214),
                    S(112,363), S(136,379), S(192,320), S(199,289), S(209,274), S(246,250), S(214,322), S(127,324),
                    S(264,437), S(312,385), S(262,429), S(303,359), S(274,359), S(247,353), S(146,418), S( 86,444),
                    S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0),
            },
            {
                    S(306,415), S(398,400), S(370,452), S(402,459), S(410,451), S(434,433), S(404,418), S(353,427),
                    S(378,448), S(398,473), S(431,480), S(455,484), S(458,482), S(463,474), S(435,450), S(431,460),
                    S(402,457), S(447,481), S(473,503), S(478,527), S(499,520), S(482,494), S(488,474), S(437,457),
                    S(437,484), S(466,504), S(496,535), S(501,535), S(519,539), S(508,522), S(504,501), S(461,462),
                    S(464,467), S(490,508), S(535,532), S(578,533), S(547,536), S(591,523), S(512,511), S(527,464),
                    S(465,469), S(530,486), S(571,506), S(591,508), S(651,478), S(637,486), S(580,465), S(523,444),
                    S(446,438), S(481,464), S(515,484), S(538,487), S(522,468), S(630,443), S(473,462), S(527,406),
                    S(220,384), S(291,459), S(384,481), S(425,459), S(463,476), S(380,440), S(334,455), S(317,333),
            },
            {
                    S(478,477), S(521,499), S(493,459), S(475,497), S(482,485), S(481,493), S(522,477), S(500,445),
                    S(522,505), S(528,497), S(548,493), S(509,516), S(523,521), S(546,496), S(558,504), S(531,465),
                    S(519,509), S(534,518), S(535,536), S(541,536), S(544,541), S(533,534), S(539,506), S(541,493),
                    S(498,507), S(525,539), S(539,548), S(576,541), S(572,540), S(543,539), S(530,527), S(516,491),
                    S(517,516), S(540,541), S(580,532), S(600,549), S(598,537), S(588,532), S(542,537), S(519,514),
                    S(530,522), S(573,513), S(573,530), S(618,510), S(588,517), S(634,522), S(601,510), S(586,505),
                    S(516,472), S(556,507), S(541,515), S(518,517), S(560,506), S(559,500), S(558,510), S(533,472),
                    S(473,504), S(448,519), S(443,520), S(355,549), S(410,530), S(439,512), S(443,508), S(423,500),
            },
            {
                    S(610,867), S(613,879), S(632,893), S(641,891), S(651,877), S(633,869), S(660,856), S(614,851),
                    S(574,876), S(593,882), S(622,879), S(617,883), S(626,864), S(633,856), S(665,836), S(613,851),
                    S(579,887), S(595,883), S(610,884), S(610,890), S(622,877), S(621,863), S(683,823), S(645,835),
                    S(590,894), S(594,904), S(612,907), S(636,900), S(639,892), S(614,889), S(651,867), S(642,860),
                    S(627,905), S(647,902), S(655,916), S(673,906), S(688,881), S(686,875), S(692,871), S(704,861),
                    S(658,901), S(692,904), S(703,905), S(712,897), S(754,879), S(751,870), S(805,859), S(773,850),
                    S(697,894), S(697,912), S(730,919), S(763,904), S(742,902), S(792,877), S(757,880), S(811,852),
                    S(710,896), S(677,913), S(691,929), S(692,925), S(732,904), S(710,902), S(679,908), S(762,882),
            },
            {
                    S(1217,1415), S(1207,1423), S(1224,1419), S(1260,1387), S(1237,1412), S(1210,1401), S(1244,1385), S(1227,1402),
                    S(1231,1432), S(1245,1423), S(1268,1407), S(1267,1427), S(1264,1433), S(1276,1397), S(1287,1351), S(1305,1323),
                    S(1238,1433), S(1255,1450), S(1248,1485), S(1245,1486), S(1252,1488), S(1265,1473), S(1286,1442), S(1274,1436),
                    S(1245,1453), S(1248,1487), S(1244,1507), S(1268,1519), S(1267,1519), S(1257,1520), S(1276,1484), S(1282,1474),
                    S(1245,1457), S(1255,1492), S(1271,1499), S(1275,1523), S(1286,1542), S(1301,1524), S(1292,1524), S(1305,1481),
                    S(1278,1441), S(1279,1461), S(1288,1503), S(1318,1504), S(1326,1520), S(1401,1488), S(1390,1442), S(1378,1454),
                    S(1274,1432), S(1242,1485), S(1267,1513), S(1277,1511), S(1298,1529), S(1339,1492), S(1285,1485), S(1350,1452),
                    S(1225,1399), S(1274,1411), S(1327,1438), S(1347,1446), S(1368,1447), S(1381,1400), S(1367,1366), S(1302,1379),
            },
            {
                    S(  49, -83), S( 101, -65), S(  54, -32), S(-120,  -9), S( -12, -43), S( -87,  -3), S(  65, -43), S(  63, -90),
                    S(  56, -29), S(  -9,   5), S( -32,  23), S( -88,  39), S( -95,  48), S( -65,  37), S(  20,   8), S(  36, -24),
                    S( -86, -10), S( -64,  28), S(-152,  63), S(-175,  85), S(-168,  86), S(-167,  74), S( -89,  42), S(-117,  25),
                    S(-151,   2), S(-174,  55), S(-235, 100), S(-286, 127), S(-288, 128), S(-220, 106), S(-216,  85), S(-241,  55),
                    S(-181,  24), S(-188,  80), S(-214, 114), S(-334, 142), S(-293, 141), S(-229, 133), S(-207, 113), S(-255,  75),
                    S(-263,  45), S( -57,  75), S(-208, 108), S(-228, 127), S(-188, 129), S( -48, 117), S( -65, 116), S(-129,  66),
                    S(-240,  17), S(-126,  66), S(-230,  93), S(-104,  65), S(-156,  96), S(-140, 111), S(   8,  93), S( -48,  52),
                    S(-183, -90), S(-230, -17), S(-158,  -2), S(-302,  61), S(-229,  34), S( -81,  34), S(   7,  32), S( 197,-137),
            },
    }};

    constexpr square_t flipSquare(square_t square) {
        return square >> 3 | (square & 7) << 3;
    }

    constexpr auto transformPSTs(const std::array<std::array<packed_eval_t, 64>, 6>& psts_) {
        std::array<std::array<packed_eval_t, 64>, 6> result = {};
        for (piece_t piece = 0; piece <= pcs::KING; piece++) {
            for (square_t square = 0; square < 64; square++) {
                result[piece][square] = psts_[piece][flipSquare(square)];
            }
        }

        return result;
    }

    constexpr auto real_psts = transformPSTs(psts);

    inline eval_t evalFromPacked(packed_eval_t packed, phase_t phase) {
        int32_t mg = int32_t(int16_t(uint16_t((packed + (1U << 15)) >> 16)));
        int32_t eg = int32_t(int16_t(uint16_t(packed)));
        if (phase >= MAX_PHASE)
            return mg;
        else
            return (mg * phase + eg * (MAX_PHASE - phase)) / MAX_PHASE;
    }
}